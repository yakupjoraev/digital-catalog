#!/usr/bin/env node

import { DatabaseIntegration } from './services/databaseIntegration';
import * as fs from 'fs';
import * as path from 'path';

async function uploadFinalData() {
  console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–ù–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ backend');
  console.log('=' .repeat(70));

  const backendUrl = process.env.BACKEND_URL || 'http://localhost:5000';
  const apiKey = process.env.API_KEY;

  console.log(`üîó Backend URL: ${backendUrl}`);

  try {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON —Ñ–∞–π–ª —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const dataDir = path.join(__dirname, 'data/output');
    
    if (!fs.existsSync(dataDir)) {
      console.error('‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
      return;
    }

    const files = fs.readdirSync(dataDir)
      .filter(file => file.endsWith('.json') && file.includes('final_full_objects'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.error('‚ùå –§–∞–π–ª—ã —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test-final');
      return;
    }

    const latestFile = files[0];
    const filePath = path.join(dataDir, latestFile);
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞—é –§–ò–ù–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: ${latestFile}`);
    
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    if (!Array.isArray(data) || data.length === 0) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: ${data.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ò–ù–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö:');
    const stats = analyzeData(data);
    console.log(`  –° –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: ${stats.withNames} (${(stats.withNames/data.length*100).toFixed(1)}%)`);
    console.log(`  –° –∞–¥—Ä–µ—Å–∞–º–∏: ${stats.withAddresses} (${(stats.withAddresses/data.length*100).toFixed(1)}%)`);
    console.log(`  –° —Ä–∞–π–æ–Ω–∞–º–∏: ${stats.withDistricts} (${(stats.withDistricts/data.length*100).toFixed(1)}%)`);
    console.log(`  –° –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏: ${stats.withContractors} (${(stats.withContractors/data.length*100).toFixed(1)}%)`);
    console.log(`  –° –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏: ${stats.withCustomers} (${(stats.withCustomers/data.length*100).toFixed(1)}%)`);
    console.log(`  –° –±—é–¥–∂–µ—Ç–æ–º: ${stats.withBudget} (${(stats.withBudget/data.length*100).toFixed(1)}%)`);
    console.log(`  –° –¥–∞—Ç–∞–º–∏: ${stats.withDates} (${(stats.withDates/data.length*100).toFixed(1)}%)`);
    console.log(`  –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: ${stats.withPhotos} (${(stats.withPhotos/data.length*100).toFixed(1)}%)`);

    const db = new DatabaseIntegration({ backendUrl, apiKey });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend...');
    const isConnected = await db.checkConnection();
    
    if (!isConnected) {
      console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', backendUrl);
      return;
    }

    console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –§–ò–ù–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ
    console.log('\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–ù–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π...');
    const results = await db.uploadObjects(data);

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –§–ò–ù–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${results.success}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);

    if (results.errors > 0) {
      console.log('\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
      results.details
        .filter(detail => detail.status === 'error')
        .slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
        .forEach(detail => {
          console.log(`  - ${detail.object}: ${detail.error}`);
        });
      
      if (results.errors > 10) {
        console.log(`  ... –∏ –µ—â–µ ${results.errors - 10} –æ—à–∏–±–æ–∫`);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if (results.success > 0) {
      console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
      results.details
        .filter(detail => detail.status === 'success')
        .slice(0, 5)
        .forEach(detail => {
          console.log(`  ‚úÖ ${detail.object}`);
        });
      
      if (results.success > 5) {
        console.log(`  ... –∏ –µ—â–µ ${results.success - 5} –æ–±—ä–µ–∫—Ç–æ–≤`);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ backend:');
    const backendStats = await db.getObjectsStats();
    if (backendStats) {
      console.log(JSON.stringify(backendStats, null, 2));
    }

    console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–ù–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üåê –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:3000');
    console.log('üì∏ –û–±—ä–µ–∫—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ —Å–ª–∞–π–¥–µ—Ä–∞–º–∏');
    console.log('üó∫Ô∏è –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Å–∏–Ω–∏–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–ò–ù–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

function analyzeData(data: any[]): any {
  return {
    withNames: data.filter(obj => obj.name && obj.name.length > 10 && !obj.name.match(/^\d+/)).length,
    withAddresses: data.filter(obj => obj.address && obj.address !== '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω').length,
    withDistricts: data.filter(obj => obj.district && obj.district !== '–ù–µ —É–∫–∞–∑–∞–Ω').length,
    withContractors: data.filter(obj => obj.contractor && obj.contractor.length > 5).length,
    withCustomers: data.filter(obj => obj.customer && obj.customer.length > 5).length,
    withBudget: data.filter(obj => obj.budget || obj.budgetMillion).length,
    withDates: data.filter(obj => obj.startDate || obj.endDate).length,
    withPhotos: data.filter(obj => obj.photos && obj.photos.length > 0).length
  };
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  uploadFinalData();
} 