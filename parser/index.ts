import { MainParser } from './services/mainParser';
import { ObjectData } from './services/pdfParser';

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞');
  console.log('=' .repeat(60));

  const parser = new MainParser();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    if (args.length > 0 && args[0].startsWith('http')) {
      // –ü–∞—Ä—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π PDF –ø–æ URL
      const pdfUrl = args[0];
      const title = args[1] || 'Manual PDF';
      
      console.log(`üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PDF: ${pdfUrl}`);
      const objects = await parser.parsePDFByUrl(pdfUrl, title);
      
      if (objects.length > 0) {
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        const stats = parser.getStatistics(objects);
        console.log(JSON.stringify(stats, null, 2));
      }
      
    } else {
      // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞
      console.log('üåê –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ volgograd.ru...');
      const objects = await parser.parseVolgogradObjects();
      
      if (objects.length > 0) {
        console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        const stats = parser.getStatistics(objects);
        console.log(`–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.total}`);
        console.log('\n–ü–æ —Ä–∞–π–æ–Ω–∞–º:');
        Object.entries(stats.byDistrict).forEach(([district, count]) => {
          console.log(`  ${district}: ${count}`);
        });
        console.log('\n–ü–æ —Ç–∏–ø–∞–º:');
        Object.entries(stats.byType).forEach(([type, count]) => {
          console.log(`  ${type}: ${count}`);
        });
        console.log('\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
        Object.entries(stats.byStatus).forEach(([status, count]) => {
          console.log(`  ${status}: ${count}`);
        });
        console.log(`\n–û–±—ä–µ–∫—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${stats.withCoordinates}`);
        console.log(`–û–±—ä–µ–∫—Ç—ã —Å —Ñ–æ—Ç–æ: ${stats.withPhotos}`);
        console.log(`–û–±—ä–µ–∫—Ç—ã —Å –±—é–¥–∂–µ—Ç–æ–º: ${stats.withBudget}`);
        console.log(`–û–±—ä–µ–∫—Ç—ã —Å –ø–ª–æ—â–∞–¥—å—é: ${stats.withArea}`);
      } else {
        console.log('‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('  - –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log('  - –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞');
        console.log('  - PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('  - –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF');
      }
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }

  console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

export { MainParser, ObjectData };
