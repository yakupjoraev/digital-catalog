#!/usr/bin/env node

import { SpecializedParser } from './services/specializedParser';
import { DatabaseIntegration } from './services/databaseIntegration';
import * as fs from 'fs';
import * as path from 'path';

async function testSpecializedParser() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ PDF');
  console.log('=' .repeat(60));

  const parser = new SpecializedParser();
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
    const downloadsDir = path.join(__dirname, 'data/downloads');
    const files = fs.readdirSync(downloadsDir)
      .filter(file => file.endsWith('.pdf'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test-real');
      return;
    }

    const latestPDF = files[0];
    const pdfPath = path.join(downloadsDir, latestPDF);
    
    console.log(`üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º PDF —Ñ–∞–π–ª: ${latestPDF}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    console.log('\nüìñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...');
    const text = await parser.extractTextFromPDF(pdfPath);

    // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    console.log('\nüéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤...');
    const objects = parser.parseObjectsFromText(text);

    if (objects.length > 0) {
      console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = getStatistics(objects);
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:');
      console.log(`–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.total}`);
      
      if (Object.keys(stats.byDistrict).length > 0) {
        console.log('\n–ü–æ —Ä–∞–π–æ–Ω–∞–º:');
        Object.entries(stats.byDistrict).forEach(([district, count]) => {
          console.log(`  ${district}: ${count}`);
        });
      }
      
      if (Object.keys(stats.byType).length > 0) {
        console.log('\n–ü–æ —Ç–∏–ø–∞–º:');
        Object.entries(stats.byType).forEach(([type, count]) => {
          console.log(`  ${type}: ${count}`);
        });
      }

      console.log('\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${stats.withCoordinates}`);
      console.log(`  –° –±—é–¥–∂–µ—Ç–æ–º: ${stats.withBudget}`);
      console.log(`  –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: ${stats.withDescription}`);
      console.log(`  –° –¥–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${stats.withCompletionDate}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:');
      objects.slice(0, 5).forEach((obj, index) => {
        console.log(`\n${index + 1}. ${obj.name}`);
        console.log(`   –ê–¥—Ä–µ—Å: ${obj.address}`);
        console.log(`   –†–∞–π–æ–Ω: ${obj.district}`);
        console.log(`   –¢–∏–ø: ${obj.type}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${obj.status}`);
        if (obj.description && obj.description.length > 20) {
          console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${obj.description.substring(0, 150)}...`);
        }
        if (obj.budget) {
          console.log(`   –ë—é–¥–∂–µ—Ç: ${obj.budget.toLocaleString('ru-RU')} —Ä—É–±.`);
        }
        if (obj.completionDate) {
          console.log(`   –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${obj.completionDate}`);
        }
        if (obj.coordinates) {
          console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${obj.coordinates.lat}, ${obj.coordinates.lng}`);
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const filename = `specialized_objects_${Date.now()}.json`;
      await parser.saveToJSON(objects, filename);

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ backend
      console.log('\nü§î –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ backend?');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run upload-specialized');

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      console.log('\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞–º–∏:');
      await compareWithPrevious(objects);

    } else {
      console.log('\n‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º');
      console.log('–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞');
    }

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

function getStatistics(objects: any[]): any {
  return {
    total: objects.length,
    byDistrict: objects.reduce((acc, obj) => {
      acc[obj.district] = (acc[obj.district] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byType: objects.reduce((acc, obj) => {
      acc[obj.type] = (acc[obj.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byStatus: objects.reduce((acc, obj) => {
      acc[obj.status] = (acc[obj.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    withCoordinates: objects.filter(obj => obj.coordinates).length,
    withPhotos: objects.filter(obj => obj.photos && obj.photos.length > 0).length,
    withBudget: objects.filter(obj => obj.budget).length,
    withDescription: objects.filter(obj => obj.description && obj.description.length > 20).length,
    withCompletionDate: objects.filter(obj => obj.completionDate).length
  };
}

async function compareWithPrevious(newObjects: any[]): Promise<void> {
  try {
    const outputDir = path.join(__dirname, 'data/output');
    const files = fs.readdirSync(outputDir)
      .filter(file => file.endsWith('.json'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('  –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
      return;
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const comparisons = [
      { pattern: 'manual_', name: '–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä' },
      { pattern: 'improved_', name: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä' },
      { pattern: 'test_objects', name: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' }
    ];

    for (const comp of comparisons) {
      const file = files.find(f => f.includes(comp.pattern));
      if (file) {
        const filePath = path.join(outputDir, file);
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        
        console.log(`\n  ${comp.name}: ${data.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
        
        const qualityScore = calculateQualityScore(data);
        const newQualityScore = calculateQualityScore(newObjects);
        
        console.log(`    –ö–∞—á–µ—Å—Ç–≤–æ: ${qualityScore.toFixed(1)}% ‚Üí ${newQualityScore.toFixed(1)}%`);
      }
    }

    console.log(`\n  –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: ${newObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);

  } catch (error) {
    console.log('  –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');
  }
}

function calculateQualityScore(objects: any[]): number {
  if (objects.length === 0) return 0;
  
  let score = 0;
  const maxScore = objects.length * 6; // 6 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
  
  objects.forEach(obj => {
    if (obj.name && obj.name.length > 10 && !obj.name.match(/^\d+/)) score++;
    if (obj.address && obj.address !== '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω') score++;
    if (obj.district && obj.district !== '–ù–µ —É–∫–∞–∑–∞–Ω') score++;
    if (obj.type && obj.type !== '–¥—Ä—É–≥–æ–µ') score++;
    if (obj.description && obj.description.length > 20) score++;
    if (obj.budget || obj.completionDate) score++;
  });
  
  return (score / maxScore) * 100;
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testSpecializedParser();
} 