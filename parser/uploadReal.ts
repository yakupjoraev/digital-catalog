#!/usr/bin/env node

import { DatabaseIntegration } from './services/databaseIntegration';
import * as fs from 'fs';
import * as path from 'path';

async function uploadRealData() {
  console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ backend');
  console.log('=' .repeat(50));

  const backendUrl = process.env.BACKEND_URL || 'http://localhost:5000';
  const apiKey = process.env.API_KEY;

  console.log(`üîó Backend URL: ${backendUrl}`);

  try {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const dataDir = path.join(__dirname, 'data/output');
    
    if (!fs.existsSync(dataDir)) {
      console.error('‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
      return;
    }

    const files = fs.readdirSync(dataDir)
      .filter(file => file.endsWith('.json') && !file.includes('test_objects'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.error('‚ùå –§–∞–π–ª—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test-real');
      return;
    }

    const latestFile = files[0];
    const filePath = path.join(dataDir, latestFile);
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: ${latestFile}`);
    
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    if (!Array.isArray(data) || data.length === 0) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${data.length}`);

    const db = new DatabaseIntegration({ backendUrl, apiKey });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend...');
    const isConnected = await db.checkConnection();
    
    if (!isConnected) {
      console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', backendUrl);
      return;
    }

    console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const results = await db.uploadObjects(data);

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${results.success}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);

    if (results.errors > 0) {
      console.log('\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
      results.details
        .filter(detail => detail.status === 'error')
        .forEach(detail => {
          console.log(`  - ${detail.object}: ${detail.error}`);
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ backend:');
    const stats = await db.getObjectsStats();
    if (stats) {
      console.log(JSON.stringify(stats, null, 2));
    }

    console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üåê –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:3000');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  uploadRealData();
} 