#!/usr/bin/env node

import { MainParser } from './services/mainParser';
import { DatabaseIntegration } from './services/databaseIntegration';
import { ObjectData } from './services/pdfParser';

interface CLIOptions {
  command: string;
  url?: string;
  backend?: string;
  clear?: boolean;
  sync?: boolean;
  help?: boolean;
}

function parseArgs(): CLIOptions {
  const args = process.argv.slice(2);
  const options: CLIOptions = {
    command: 'parse'
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--help':
      case '-h':
        options.help = true;
        break;
      case '--url':
      case '-u':
        options.url = args[++i];
        break;
      case '--backend':
      case '-b':
        options.backend = args[++i];
        break;
      case '--clear':
      case '-c':
        options.clear = true;
        break;
      case '--sync':
      case '-s':
        options.sync = true;
        break;
      case 'parse':
      case 'upload':
      case 'sync':
      case 'stats':
      case 'clear':
        options.command = arg;
        break;
    }
  }

  return options;
}

function showHelp() {
  console.log(`
üöÄ –ü–∞—Ä—Å–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  npm run cli [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]

–ö–û–ú–ê–ù–î–´:
  parse     –ü–∞—Ä—Å–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å —Å–∞–π—Ç–∞ volgograd.ru (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  upload    –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ backend
  sync      –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: –ø–∞—Ä—Å–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ backend
  stats     –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ backend
  clear     –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ backend

–û–ü–¶–ò–ò:
  --url, -u <url>        URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PDF –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  --backend, -b <url>    URL backend —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:5000)
  --clear, -c            –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
  --sync, -s             –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å backend –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
  --help, -h             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
  npm run cli parse                                    # –ü–∞—Ä—Å–∏—Ç—å —Å–∞–π—Ç
  npm run cli -- parse --url "https://example.com/file.pdf"  # –ü–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π PDF
  npm run cli sync                                     # –ü–∞—Ä—Å–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ backend
  npm run cli upload --backend http://localhost:5000  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ backend
`);
}

async function main() {
  const options = parseArgs();

  if (options.help) {
    showHelp();
    return;
  }

  const backendUrl = options.backend || process.env.BACKEND_URL || 'http://localhost:5000';
  const apiKey = process.env.API_KEY;

  console.log('üöÄ –ü–∞—Ä—Å–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞');
  console.log('=' .repeat(60));

  try {
    switch (options.command) {
      case 'parse':
        await handleParse(options, backendUrl, apiKey);
        break;
      case 'upload':
        await handleUpload(backendUrl, apiKey);
        break;
      case 'sync':
        await handleSync(options, backendUrl, apiKey);
        break;
      case 'stats':
        await handleStats(backendUrl, apiKey);
        break;
      case 'clear':
        await handleClear(backendUrl, apiKey);
        break;
      default:
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${options.command}`);
        showHelp();
        process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

async function handleParse(options: CLIOptions, backendUrl: string, apiKey?: string) {
  const parser = new MainParser();
  let objects: ObjectData[] = [];

  if (options.url) {
    console.log(`üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PDF: ${options.url}`);
    objects = await parser.parsePDFByUrl(options.url);
  } else {
    console.log('üåê –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ volgograd.ru...');
    objects = await parser.parseVolgogradObjects();
  }

  if (objects.length > 0) {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    const stats = parser.getStatistics(objects);
    printStats(stats);

    if (options.sync) {
      console.log('\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend...');
      const db = new DatabaseIntegration({ backendUrl, apiKey });
      await db.syncObjects(objects, options.clear);
    }
  } else {
    console.log('‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
}

async function handleUpload(backendUrl: string, apiKey?: string) {
  console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ backend...');
  
  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
  const fs = require('fs');
  const path = require('path');
  const dataDir = path.join(__dirname, 'data/output');
  
  if (!fs.existsSync(dataDir)) {
    console.error('‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
    return;
  }

  const files = fs.readdirSync(dataDir)
    .filter((file: string) => file.endsWith('.json') && !file.includes('_report'))
    .sort()
    .reverse();

  if (files.length === 0) {
    console.error('‚ùå JSON —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
    return;
  }

  const latestFile = files[0];
  const filePath = path.join(dataDir, latestFile);
  
  console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: ${latestFile}`);
  
  const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
  
  const db = new DatabaseIntegration({ backendUrl, apiKey });
  await db.uploadObjects(data);
}

async function handleSync(options: CLIOptions, backendUrl: string, apiKey?: string) {
  console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ + –∑–∞–≥—Ä—É–∑–∫–∞ –≤ backend...');
  
  const parser = new MainParser();
  let objects: ObjectData[] = [];

  if (options.url) {
    objects = await parser.parsePDFByUrl(options.url);
  } else {
    objects = await parser.parseVolgogradObjects();
  }

  if (objects.length > 0) {
    const db = new DatabaseIntegration({ backendUrl, apiKey });
    await db.syncObjects(objects, options.clear);
  } else {
    console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
  }
}

async function handleStats(backendUrl: string, apiKey?: string) {
  console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ backend...');
  
  const db = new DatabaseIntegration({ backendUrl, apiKey });
  const isConnected = await db.checkConnection();
  
  if (!isConnected) {
    console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return;
  }

  const stats = await db.getObjectsStats();
  
  if (stats) {
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(JSON.stringify(stats, null, 2));
  } else {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  }
}

async function handleClear(backendUrl: string, apiKey?: string) {
  console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ backend...');
  
  const db = new DatabaseIntegration({ backendUrl, apiKey });
  const success = await db.clearAllObjects();
  
  if (success) {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

function printStats(stats: any) {
  console.log(`–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.total}`);
  
  if (Object.keys(stats.byDistrict).length > 0) {
    console.log('\n–ü–æ —Ä–∞–π–æ–Ω–∞–º:');
    Object.entries(stats.byDistrict).forEach(([district, count]) => {
      console.log(`  ${district}: ${count}`);
    });
  }
  
  if (Object.keys(stats.byType).length > 0) {
    console.log('\n–ü–æ —Ç–∏–ø–∞–º:');
    Object.entries(stats.byType).forEach(([type, count]) => {
      console.log(`  ${type}: ${count}`);
    });
  }
  
  if (Object.keys(stats.byStatus).length > 0) {
    console.log('\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    Object.entries(stats.byStatus).forEach(([status, count]) => {
      console.log(`  ${status}: ${count}`);
    });
  }
  
  console.log(`\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:`);
  console.log(`  –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${stats.withCoordinates}`);
  console.log(`  –° —Ñ–æ—Ç–æ: ${stats.withPhotos}`);
  console.log(`  –° –±—é–¥–∂–µ—Ç–æ–º: ${stats.withBudget}`);
  console.log(`  –° –ø–ª–æ—â–∞–¥—å—é: ${stats.withArea}`);
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
} 