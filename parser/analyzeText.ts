#!/usr/bin/env node

import { PDFParser } from './services/pdfParser';
import * as fs from 'fs';
import * as path from 'path';

async function analyzeText() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞ PDF');
  console.log('=' .repeat(50));

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
    const downloadsDir = path.join(__dirname, 'data/downloads');
    const files = fs.readdirSync(downloadsDir)
      .filter(file => file.endsWith('.pdf'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const latestPDF = files[0];
    const pdfPath = path.join(downloadsDir, latestPDF);
    
    console.log(`üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF: ${latestPDF}`);

    const parser = new PDFParser();
    const text = await parser.extractTextFromPDF(pdfPath);

    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: ${text.length}`);
    
    const lines = text.split('\n').filter(line => line.trim().length > 0);
    console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`);
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = lines.filter(line => 
      line.includes('–û–ë–™–ï–ö–¢') || 
      line.includes('–ë–õ–ê–ì–û–£–°–¢–†–û–ô–°–¢–í') ||
      line.includes('‚Ññ') ||
      line.includes('–ê–¥—Ä–µ—Å') ||
      line.includes('–ó–∞–∫–∞–∑—á–∏–∫')
    );
    
    console.log(`–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.length}`);
    headers.slice(0, 5).forEach((header, i) => {
      console.log(`  ${i + 1}. ${header.substring(0, 80)}...`);
    });

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    const datesLines = lines.filter(line => 
      /\d{2}\.\d{2}\.\d{4}/.test(line) || 
      /\d{4}/.test(line)
    );
    
    console.log(`\n–°—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏: ${datesLines.length}`);
    datesLines.slice(0, 5).forEach((line, i) => {
      console.log(`  ${i + 1}. ${line.substring(0, 80)}...`);
    });

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏
    const addressLines = lines.filter(line => 
      /—É–ª\.|–ø—Ä\.|–ø–µ—Ä\.|–±-—Ä|–Ω–∞–±\.|–ø–ª\./i.test(line)
    );
    
    console.log(`\n–°—Ç—Ä–æ–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏: ${addressLines.length}`);
    addressLines.slice(0, 5).forEach((line, i) => {
      console.log(`  ${i + 1}. ${line.substring(0, 80)}...`);
    });

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–π–æ–Ω–∞–º–∏
    const districtLines = lines.filter(line => {
      const districts = ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π',
                        '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π'];
      return districts.some(district => line.includes(district));
    });
    
    console.log(`\n–°—Ç—Ä–æ–∫–∏ —Å —Ä–∞–π–æ–Ω–∞–º–∏: ${districtLines.length}`);
    districtLines.slice(0, 5).forEach((line, i) => {
      console.log(`  ${i + 1}. ${line.substring(0, 80)}...`);
    });

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –±—é–¥–∂–µ—Ç)
    const numberLines = lines.filter(line => 
      /\d+[,\.]?\d*\s*(–º–ª–Ω|—Ç—ã—Å|—Ä—É–±)/i.test(line)
    );
    
    console.log(`\n–°—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ (–±—é–¥–∂–µ—Ç): ${numberLines.length}`);
    numberLines.slice(0, 5).forEach((line, i) => {
      console.log(`  ${i + 1}. ${line.substring(0, 80)}...`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log(`\nüìù –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞:`);
    lines.slice(0, 20).forEach((line, i) => {
      console.log(`${(i + 1).toString().padStart(2, '0')}. ${line.substring(0, 100)}`);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–∞–π–ª
    const analysisPath = path.join(__dirname, 'data/output', 'text_analysis.txt');
    const analysisContent = [
      '=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ PDF –¢–ï–ö–°–¢–ê ===',
      `–§–∞–π–ª: ${latestPDF}`,
      `–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toLocaleString('ru-RU')}`,
      '',
      `–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: ${text.length}`,
      `–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`,
      '',
      '=== –ó–ê–ì–û–õ–û–í–ö–ò ===',
      ...headers.slice(0, 10),
      '',
      '=== –°–¢–†–û–ö–ò –° –î–ê–¢–ê–ú–ò ===',
      ...datesLines.slice(0, 10),
      '',
      '=== –°–¢–†–û–ö–ò –° –ê–î–†–ï–°–ê–ú–ò ===',
      ...addressLines.slice(0, 10),
      '',
      '=== –°–¢–†–û–ö–ò –° –†–ê–ô–û–ù–ê–ú–ò ===',
      ...districtLines.slice(0, 10),
      '',
      '=== –ü–ï–†–í–´–ï 50 –°–¢–†–û–ö ===',
      ...lines.slice(0, 50).map((line, i) => `${(i + 1).toString().padStart(3, '0')}. ${line}`)
    ].join('\n');

    fs.writeFileSync(analysisPath, analysisContent, 'utf8');
    console.log(`\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${analysisPath}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  analyzeText();
} 