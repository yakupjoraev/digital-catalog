#!/usr/bin/env node

import { ImprovedPDFParser } from './services/improvedPDFParser';
import { DatabaseIntegration } from './services/databaseIntegration';
import * as fs from 'fs';
import * as path from 'path';

async function testImprovedParser() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ PDF');
  console.log('=' .repeat(60));

  const parser = new ImprovedPDFParser();
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
    const downloadsDir = path.join(__dirname, 'data/downloads');
    const files = fs.readdirSync(downloadsDir)
      .filter(file => file.endsWith('.pdf'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test-real');
      return;
    }

    const latestPDF = files[0];
    const pdfPath = path.join(downloadsDir, latestPDF);
    
    console.log(`üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º PDF —Ñ–∞–π–ª: ${latestPDF}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    console.log('\nüìñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...');
    const text = await parser.extractTextFromPDF(pdfPath);

    // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    console.log('\nüîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤...');
    const objects = parser.parseObjectsFromText(text);

    if (objects.length > 0) {
      console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = getStatistics(objects);
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:');
      console.log(`–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.total}`);
      
      if (Object.keys(stats.byDistrict).length > 0) {
        console.log('\n–ü–æ —Ä–∞–π–æ–Ω–∞–º:');
        Object.entries(stats.byDistrict).forEach(([district, count]) => {
          console.log(`  ${district}: ${count}`);
        });
      }
      
      if (Object.keys(stats.byType).length > 0) {
        console.log('\n–ü–æ —Ç–∏–ø–∞–º:');
        Object.entries(stats.byType).forEach(([type, count]) => {
          console.log(`  ${type}: ${count}`);
        });
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤
      console.log('\nüìã –õ—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:');
      const bestObjects = objects
        .filter(obj => obj.name.length > 10 && !obj.name.match(/^\d+/))
        .slice(0, 5);

      bestObjects.forEach((obj, index) => {
        console.log(`\n${index + 1}. ${obj.name}`);
        console.log(`   –ê–¥—Ä–µ—Å: ${obj.address}`);
        console.log(`   –†–∞–π–æ–Ω: ${obj.district}`);
        console.log(`   –¢–∏–ø: ${obj.type}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${obj.status}`);
        if (obj.description && obj.description.length > 20) {
          console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${obj.description.substring(0, 100)}...`);
        }
        if (obj.budget) {
          console.log(`   –ë—é–¥–∂–µ—Ç: ${obj.budget.toLocaleString('ru-RU')} —Ä—É–±.`);
        }
        if (obj.completionDate) {
          console.log(`   –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${obj.completionDate}`);
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const filename = `improved_objects_${Date.now()}.json`;
      await parser.saveToJSON(objects, filename);

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ backend
      console.log('\nü§î –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ backend?');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run upload-improved');

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      console.log('\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º:');
      await compareWithPrevious(objects);

    } else {
      console.log('\n‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º');
      console.log('–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞');
    }

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

function getStatistics(objects: any[]): any {
  return {
    total: objects.length,
    byDistrict: objects.reduce((acc, obj) => {
      acc[obj.district] = (acc[obj.district] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byType: objects.reduce((acc, obj) => {
      acc[obj.type] = (acc[obj.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byStatus: objects.reduce((acc, obj) => {
      acc[obj.status] = (acc[obj.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    withCoordinates: objects.filter(obj => obj.coordinates).length,
    withPhotos: objects.filter(obj => obj.photos && obj.photos.length > 0).length,
    withBudget: objects.filter(obj => obj.budget).length,
    withDescription: objects.filter(obj => obj.description && obj.description.length > 20).length
  };
}

async function compareWithPrevious(newObjects: any[]): Promise<void> {
  try {
    const outputDir = path.join(__dirname, 'data/output');
    const files = fs.readdirSync(outputDir)
      .filter(file => file.endsWith('.json') && file.includes('manual_'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('  –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
      return;
    }

    const previousFile = files[0];
    const previousPath = path.join(outputDir, previousFile);
    const previousData = JSON.parse(fs.readFileSync(previousPath, 'utf8'));

    console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${previousData.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
    console.log(`  –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${newObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
    
    const improvement = newObjects.length - previousData.length;
    if (improvement > 0) {
      console.log(`  üìà –£–ª—É—á—à–µ–Ω–∏–µ: +${improvement} –æ–±—ä–µ–∫—Ç–æ–≤`);
    } else if (improvement < 0) {
      console.log(`  üìâ –£–º–µ–Ω—å—à–µ–Ω–∏–µ: ${improvement} –æ–±—ä–µ–∫—Ç–æ–≤`);
    } else {
      console.log(`  ‚û°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å`);
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π
    const previousGoodNames = previousData.filter((obj: any) => 
      obj.name.length > 10 && !obj.name.match(/^\d+/)
    ).length;
    
    const newGoodNames = newObjects.filter(obj => 
      obj.name.length > 10 && !obj.name.match(/^\d+/)
    ).length;

    console.log(`  –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: ${previousGoodNames} ‚Üí ${newGoodNames}`);

  } catch (error) {
    console.log('  –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testImprovedParser();
} 