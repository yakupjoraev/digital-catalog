#!/usr/bin/env node

import { testObjects, saveTestData } from './testData';
import { DatabaseIntegration } from './services/databaseIntegration';

async function testUpload() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ backend');
  console.log('=' .repeat(50));

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  saveTestData();

  const backendUrl = process.env.BACKEND_URL || 'http://localhost:5000';
  const apiKey = process.env.API_KEY;

  console.log(`üîó Backend URL: ${backendUrl}`);

  const db = new DatabaseIntegration({ backendUrl, apiKey });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend...');
    const isConnected = await db.checkConnection();
    
    if (!isConnected) {
      console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', backendUrl);
      process.exit(1);
    }

    console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const results = await db.uploadObjects(testObjects);

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${results.success}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);

    if (results.errors > 0) {
      console.log('\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
      results.details
        .filter(detail => detail.status === 'error')
        .forEach(detail => {
          console.log(`  - ${detail.object}: ${detail.error}`);
        });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ backend:');
    const stats = await db.getObjectsStats();
    if (stats) {
      console.log(JSON.stringify(stats, null, 2));
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testUpload();
} 