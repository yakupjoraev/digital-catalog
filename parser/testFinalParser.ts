#!/usr/bin/env node

import { FinalParser, FullObjectData } from './services/finalParser';
import * as fs from 'fs';
import * as path from 'path';

async function testFinalParser() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–ù–ê–õ–¨–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π');
  console.log('=' .repeat(70));

  const parser = new FinalParser();
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
    const downloadsDir = path.join(__dirname, 'data/downloads');
    const files = fs.readdirSync(downloadsDir)
      .filter(file => file.endsWith('.pdf'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test-real');
      return;
    }

    const latestPDF = files[0];
    const pdfPath = path.join(downloadsDir, latestPDF);
    
    console.log(`üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º PDF —Ñ–∞–π–ª: ${latestPDF}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    console.log('\nüìñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...');
    const text = await parser.extractTextFromPDF(pdfPath);

    // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç—ã —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π...');
    const objects = parser.parseObjectsFromText(text);

    if (objects.length > 0) {
      console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = getFullStatistics(objects);
      console.log('\nüìä –ü–û–õ–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:');
      console.log(`–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.total}`);
      
      if (Object.keys(stats.byDistrict).length > 0) {
        console.log('\nüèòÔ∏è –ü–æ —Ä–∞–π–æ–Ω–∞–º:');
        Object.entries(stats.byDistrict).forEach(([district, count]) => {
          console.log(`  ${district}: ${count}`);
        });
      }
      
      if (Object.keys(stats.byType).length > 0) {
        console.log('\nüèóÔ∏è –ü–æ —Ç–∏–ø–∞–º:');
        Object.entries(stats.byType).forEach(([type, count]) => {
          console.log(`  ${type}: ${count}`);
        });
      }

      if (Object.keys(stats.byRegion).length > 0) {
        console.log('\nüåç –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º:');
        Object.entries(stats.byRegion).forEach(([region, count]) => {
          console.log(`  ${region}: ${count}`);
        });
      }

      console.log('\nüìà –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
      console.log(`  –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${stats.withCoordinates} (${(stats.withCoordinates/stats.total*100).toFixed(1)}%)`);
      console.log(`  –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: ${stats.withPhotos} (${(stats.withPhotos/stats.total*100).toFixed(1)}%)`);
      console.log(`  –° –±—é–¥–∂–µ—Ç–æ–º: ${stats.withBudget} (${(stats.withBudget/stats.total*100).toFixed(1)}%)`);
      console.log(`  –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: ${stats.withDescription} (${(stats.withDescription/stats.total*100).toFixed(1)}%)`);
      console.log(`  –° –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º: ${stats.withContractor} (${(stats.withContractor/stats.total*100).toFixed(1)}%)`);
      console.log(`  –° –∑–∞–∫–∞–∑—á–∏–∫–æ–º: ${stats.withCustomer} (${(stats.withCustomer/stats.total*100).toFixed(1)}%)`);
      console.log(`  –° –¥–∞—Ç–∞–º–∏: ${stats.withDates} (${(stats.withDates/stats.total*100).toFixed(1)}%)`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:');
      objects.slice(0, 3).forEach((obj, index) => {
        console.log(`\n${index + 1}. üèóÔ∏è ${obj.name}`);
        console.log(`   üìç –ê–¥—Ä–µ—Å: ${obj.address}`);
        console.log(`   üèòÔ∏è –†–∞–π–æ–Ω: ${obj.district}`);
        console.log(`   üåç –†–µ–≥–∏–æ–Ω: ${obj.region}`);
        console.log(`   üè∑Ô∏è –¢–∏–ø: ${obj.type}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${obj.status} (${obj.status_detailed})`);
        
        if (obj.customer) {
          console.log(`   üë§ –ó–∞–∫–∞–∑—á–∏–∫: ${obj.customer}`);
        }
        
        if (obj.contractor) {
          console.log(`   üè¢ –ü–æ–¥—Ä—è–¥—á–∏–∫: ${obj.contractor}`);
        }
        
        if (obj.startDate) {
          console.log(`   üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${obj.startDate}`);
        }
        
        if (obj.endDate) {
          console.log(`   üèÅ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${obj.endDate}`);
        }
        
        if (obj.budgetMillion) {
          console.log(`   üí∞ –ë—é–¥–∂–µ—Ç: ${obj.budgetMillion} –º–ª–Ω —Ä—É–±. (${obj.budget?.toLocaleString('ru-RU')} —Ä—É–±.)`);
        }
        
        if (obj.photos && obj.photos.length > 0) {
          console.log(`   üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${obj.photos.length}`);
        }
        
        if (obj.coordinates) {
          console.log(`   üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${obj.coordinates.lat}, ${obj.coordinates.lng}`);
        }
        
        if (obj.description && obj.description.length > 20) {
          console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${obj.description.substring(0, 150)}...`);
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ
      console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ü–û–õ–ù–´–• –¥–∞–Ω–Ω—ã—Ö...');
      const filename = `final_full_objects_${Date.now()}.json`;
      await parser.saveFullDataToJSON(objects, filename);

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ backend
      console.log('\nü§î –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –≤ backend?');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run upload-final');

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      console.log('\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞–º–∏:');
      await compareWithPrevious(objects);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
      const qualityScore = calculateQualityScore(objects);
      console.log(`\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: ${qualityScore.toFixed(1)}%`);
      
      if (qualityScore >= 80) {
        console.log('üéâ –û–¢–õ–ò–ß–ù–û! –î–∞–Ω–Ω—ã–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞');
      } else if (qualityScore >= 60) {
        console.log('üëç –•–û–†–û–®–û! –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞');
      } else {
        console.log('‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å');
      }

    } else {
      console.log('\n‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º');
      console.log('–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞');
    }

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–ù–ê–õ–¨–ù–û–ì–û –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

function getFullStatistics(objects: FullObjectData[]): any {
  return {
    total: objects.length,
    byDistrict: objects.reduce((acc, obj) => {
      acc[obj.district] = (acc[obj.district] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byType: objects.reduce((acc, obj) => {
      acc[obj.type] = (acc[obj.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byRegion: objects.reduce((acc, obj) => {
      acc[obj.region || '–ù–µ —É–∫–∞–∑–∞–Ω'] = (acc[obj.region || '–ù–µ —É–∫–∞–∑–∞–Ω'] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    byStatus: objects.reduce((acc, obj) => {
      acc[obj.status] = (acc[obj.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>),
    withCoordinates: objects.filter(obj => obj.coordinates).length,
    withPhotos: objects.filter(obj => obj.photos && obj.photos.length > 0).length,
    withBudget: objects.filter(obj => obj.budget || obj.budgetMillion).length,
    withDescription: objects.filter(obj => obj.description && obj.description.length > 20).length,
    withContractor: objects.filter(obj => obj.contractor && obj.contractor.length > 5).length,
    withCustomer: objects.filter(obj => obj.customer && obj.customer.length > 5).length,
    withDates: objects.filter(obj => obj.startDate || obj.endDate).length
  };
}

async function compareWithPrevious(newObjects: FullObjectData[]): Promise<void> {
  try {
    const outputDir = path.join(__dirname, 'data/output');
    const files = fs.readdirSync(outputDir)
      .filter(file => file.endsWith('.json'))
      .sort()
      .reverse();

    if (files.length === 0) {
      console.log('  –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
      return;
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const comparisons = [
      { pattern: 'manual_', name: '–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä' },
      { pattern: 'improved_', name: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä' },
      { pattern: 'specialized_', name: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä' }
    ];

    for (const comp of comparisons) {
      const file = files.find(f => f.includes(comp.pattern));
      if (file) {
        const filePath = path.join(outputDir, file);
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        
        console.log(`\n  ${comp.name}: ${data.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
        
        const qualityScore = calculateQualityScore(data);
        const newQualityScore = calculateQualityScore(newObjects);
        
        console.log(`    –ö–∞—á–µ—Å—Ç–≤–æ: ${qualityScore.toFixed(1)}% ‚Üí ${newQualityScore.toFixed(1)}%`);
        
        const improvement = newQualityScore - qualityScore;
        if (improvement > 0) {
          console.log(`    üìà –£–ª—É—á—à–µ–Ω–∏–µ: +${improvement.toFixed(1)}%`);
        }
      }
    }

    console.log(`\n  üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä: ${newObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);

  } catch (error) {
    console.log('  –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');
  }
}

function calculateQualityScore(objects: any[]): number {
  if (objects.length === 0) return 0;
  
  let score = 0;
  const maxScore = objects.length * 10; // 10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
  
  objects.forEach(obj => {
    if (obj.name && obj.name.length > 10 && !obj.name.match(/^\d+/)) score++;
    if (obj.address && obj.address !== '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω') score++;
    if (obj.district && obj.district !== '–ù–µ —É–∫–∞–∑–∞–Ω') score++;
    if (obj.type && obj.type !== '–¥—Ä—É–≥–æ–µ') score++;
    if (obj.description && obj.description.length > 20) score++;
    if (obj.budget || obj.budgetMillion) score++;
    if (obj.contractor && obj.contractor.length > 5) score++;
    if (obj.customer && obj.customer.length > 5) score++;
    if (obj.startDate || obj.endDate) score++;
    if (obj.coordinates) score++;
  });
  
  return (score / maxScore) * 100;
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testFinalParser();
} 