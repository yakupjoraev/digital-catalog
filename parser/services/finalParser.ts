import { PDFParser, ObjectData } from './pdfParser';

export interface FullObjectData extends ObjectData {
  contractor?: string;           // –ü–æ–¥—Ä—è–¥–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
  customer?: string;            // –ó–∞–∫–∞–∑—á–∏–∫
  startDate?: string;           // –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  endDate?: string;             // –°—Ä–æ–∫ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
  budgetMillion?: number;       // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–ª–Ω —Ä—É–±–ª–µ–π
  location?: string;            // –õ–æ–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  photoIcon?: boolean;          // –ï—Å—Ç—å –ª–∏ –∏–∫–æ–Ω–∫–∞ —Ñ–æ—Ç–æ
  mapIcon?: boolean;            // –ï—Å—Ç—å –ª–∏ –∏–∫–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã
  status_detailed?: string;     // –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–°–ú–† –∏ —Ç.–¥.)
  objectNumber?: number;        // –ù–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
  region?: string;              // –†–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥
  fullDescription?: string;     // –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
}

export class FinalParser extends PDFParser {
  
  /**
   * –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –í–°–ï–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  parseObjectsFromText(text: string): FullObjectData[] {
    const objects: FullObjectData[] = [];
    
    try {
      console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –í–°–ï–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ PDF...');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
      const lines = text.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);

      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
      let tableStart = -1;
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') && 
            lines[i + 1] && lines[i + 1].includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥')) {
          tableStart = i;
          break;
        }
      }

      if (tableStart === -1) {
        console.log('‚ö†Ô∏è –ù–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return [];
      }

      console.log(`üìç –ù–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${tableStart + 1}`);

      // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
      let currentIndex = tableStart;
      let objectNumber = 1;

      while (currentIndex < lines.length - 5) {
        const objectData = this.parseTableRow(lines, currentIndex, objectNumber);
        
        if (objectData.object) {
          objects.push(objectData.object);
          console.log(`‚úÖ –û–±—ä–µ–∫—Ç ${objectNumber}: ${objectData.object.name}`);
        }
        
        if (objectData.nextIndex > currentIndex) {
          currentIndex = objectData.nextIndex;
          objectNumber++;
        } else {
          currentIndex++;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (objectNumber > 50) {
          console.log('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—ä–µ–∫—Ç–æ–≤ (50)');
          break;
        }
      }

      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      return objects;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  private parseTableRow(lines: string[], startIndex: number, objectNumber: number): { object: FullObjectData | null; nextIndex: number } {
    try {
      const rowData: string[] = [];
      let currentIndex = startIndex;

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–æ–±—ã—á–Ω–æ 15-25 —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç)
      while (currentIndex < lines.length && rowData.length < 30) {
        const line = lines[currentIndex];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
        if (currentIndex > startIndex && 
            line.includes('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') && 
            lines[currentIndex + 1] && 
            lines[currentIndex + 1].includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥')) {
          break;
        }

        rowData.push(line);
        currentIndex++;
      }

      // –ü–∞—Ä—Å–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const object = this.parseRowData(rowData, objectNumber);
      
      return {
        object: object,
        nextIndex: currentIndex
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${objectNumber}:`, error);
      return { object: null, nextIndex: startIndex + 1 };
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
   */
  private parseRowData(rowData: string[], objectNumber: number): FullObjectData | null {
    try {
      if (rowData.length < 5) {
        return null;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è
      const name = this.extractObjectName(rowData);
      const region = this.extractRegion(rowData);
      const address = this.extractFullAddress(rowData);
      const district = this.extractDistrictFromRows(rowData);
      const customer = this.extractCustomer(rowData);
      const contractor = this.extractContractor(rowData);
      const startDate = this.extractStartDate(rowData);
      const endDate = this.extractEndDate(rowData);
      const budget = this.extractBudgetMillion(rowData);
      const type = this.extractObjectTypeFromRows(rowData);
      const description = this.extractFullDescription(rowData);
      const hasPhoto = this.hasPhotoIcon(rowData);
      const hasMap = this.hasMapIcon(rowData);
      const statusDetailed = this.extractDetailedStatus(rowData);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
      const object: FullObjectData = {
        name: name || `–û–±—ä–µ–∫—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Ññ${objectNumber}`,
        address: address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
        district: district || '–ù–µ —É–∫–∞–∑–∞–Ω',
        type: type || '–¥—Ä—É–≥–æ–µ',
        status: '–∞–∫—Ç–∏–≤–Ω—ã–π',
        description: description,
        coordinates: this.getDistrictCoordinates(district),
        photos: hasPhoto ? this.generatePhotoUrls(objectNumber) : [],
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        objectNumber: objectNumber,
        region: region,
        customer: customer,
        contractor: contractor,
        startDate: startDate,
        endDate: endDate,
        budgetMillion: budget,
        budget: budget ? budget * 1000000 : undefined,
        completionDate: endDate,
        fullDescription: description,
        photoIcon: hasPhoto,
        mapIcon: hasMap,
        status_detailed: statusDetailed
      };

      return object;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ${objectNumber}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   */
  private extractObjectName(rowData: string[]): string {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞ (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è")
    for (let i = 0; i < rowData.length; i++) {
      const line = rowData[i];
      
      if (line.includes('—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è,') || 
          line.includes('–ø—Ä–∏–ª–µ–≥–∞—é—â–∞—è –∫') ||
          line.includes('–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') ||
          line.includes('–ü–∞—Ä–∫') ||
          line.includes('–°–∫–≤–µ—Ä') ||
          line.includes('–ø–ª–æ—â–∞–¥–∫–∞') ||
          line.includes('–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è')) {
        
        let name = line;
        
        // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name = name.replace(/^—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è,?\s*/i, '');
        name = name.replace(/–ø—Ä–∏–ª–µ–≥–∞—é—â–∞—è –∫\s*/i, '');
        name = name.trim();
        
        if (name.length > 10) {
          return name;
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ª—é–±—É—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    for (const line of rowData) {
      if (line.length > 15 && 
          !line.includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥') &&
          !line.includes('–ú–ë–£') &&
          !line.includes('–û–û–û') &&
          !line.includes('—Ä–∞–π–æ–Ω') &&
          !/^\d+$/.test(line)) {
        return line;
      }
    }

    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥
   */
  private extractRegion(rowData: string[]): string {
    for (const line of rowData) {
      if (line.includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥')) {
        return '–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥';
      }
      if (line.includes('–≥.–í–æ–ª–∂—Å–∫–∏–π')) {
        return '–≥.–í–æ–ª–∂—Å–∫–∏–π';
      }
      if (line.includes('–≥.–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞')) {
        return '–≥.–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞';
      }
      if (line.includes('–≥.–ö–∞–º—ã—à–∏–Ω')) {
        return '–≥.–ö–∞–º—ã—à–∏–Ω';
      }
    }
    return '–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
   */
  private extractFullAddress(rowData: string[]): string {
    const addresses: string[] = [];
    
    for (const line of rowData) {
      if (line.includes('–ø–æ —É–ª.') || 
          line.includes('–ø–æ –ø—Ä.') ||
          line.includes('–≤ —Ä–∞–π–æ–Ω–µ') ||
          line.includes('–≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö') ||
          line.includes('–æ—Ç —É–ª.') ||
          line.includes('–¥–æ —É–ª.')) {
        addresses.push(line.trim());
      }
    }

    if (addresses.length > 0) {
      return addresses.join(', ');
    }

    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–π–æ–Ω
   */
  private extractDistrictFromRows(rowData: string[]): string {
    const districts = [
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π',
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π'
    ];
    
    for (const line of rowData) {
      for (const district of districts) {
        if (line.includes(district)) {
          return district;
        }
      }
    }
    
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
   */
  private extractCustomer(rowData: string[]): string {
    for (const line of rowData) {
      if (line.includes('–ú–ë–£') || line.includes('–ú–ö–£') || line.includes('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è')) {
        return line.trim();
      }
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
   */
  private extractContractor(rowData: string[]): string {
    for (const line of rowData) {
      if (line.includes('–û–û–û') || line.includes('–ò–ü') || line.includes('–ê–û')) {
        return line.trim();
      }
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
   */
  private extractStartDate(rowData: string[]): string {
    const dates = this.extractAllDates(rowData);
    return dates.length > 0 ? dates[0] : '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
   */
  private extractEndDate(rowData: string[]): string {
    const dates = this.extractAllDates(rowData);
    return dates.length > 1 ? dates[1] : dates.length > 0 ? dates[0] : '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractAllDates(rowData: string[]): string[] {
    const dates: string[] = [];
    
    for (const line of rowData) {
      const dateMatches = line.match(/(\d{2})\.(\d{2})\.(\d{4})/g);
      if (dateMatches) {
        for (const match of dateMatches) {
          const [day, month, year] = match.split('.');
          dates.push(`${year}-${month}-${day}`);
        }
      }
    }
    
    return dates;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—é–¥–∂–µ—Ç –≤ –º–ª–Ω —Ä—É–±–ª–µ–π
   */
  private extractBudgetMillion(rowData: string[]): number | undefined {
    for (const line of rowData) {
      // –ò—â–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π (—Ñ–æ—Ä–º–∞—Ç: 59,00 –∏–ª–∏ 68,1)
      const budgetMatch = line.match(/(\d+),(\d+)/);
      if (budgetMatch) {
        return parseFloat(`${budgetMatch[1]}.${budgetMatch[2]}`);
      }
      
      // –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞
      const numberMatch = line.match(/(\d+\.\d+|\d+)/);
      if (numberMatch && !line.includes('2025') && !line.includes('2024')) {
        const value = parseFloat(numberMatch[1]);
        if (value > 0 && value < 1000) { // –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –º–ª–Ω —Ä—É–±–ª–µ–π
          return value;
        }
      }
    }
    
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
   */
  private extractObjectTypeFromRows(rowData: string[]): string {
    const fullText = rowData.join(' ').toLowerCase();
    
    const typeMap: Record<string, string> = {
      '–ø–∞—Ä–∫': '–ø–∞—Ä–∫',
      '—Å–∫–≤–µ—Ä': '—Å–∫–≤–µ—Ä',
      '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
      '–±—É–ª—å–≤–∞—Ä': '–±—É–ª—å–≤–∞—Ä',
      '–ø–ª–æ—â–∞–¥—å': '–ø–ª–æ—â–∞–¥—å',
      '—Ñ–æ–Ω—Ç–∞–Ω': '—Ñ–æ–Ω—Ç–∞–Ω',
      '–∞–ª–ª–µ—è': '–ø–∞—Ä–∫',
      '–æ–∑–µ–ª–µ–Ω–µ–Ω–∏—è': '–ø–∞—Ä–∫',
      '–ø–µ—à–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞': '–ø–µ—à–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞',
      '–¥–≤–æ—Ä–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è': '–¥–≤–æ—Ä–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è'
    };

    for (const [key, value] of Object.entries(typeMap)) {
      if (fullText.includes(key)) {
        return value;
      }
    }

    return '–¥—Ä—É–≥–æ–µ';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  private extractFullDescription(rowData: string[]): string {
    const relevantLines = rowData.filter(line => 
      !line.includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥') &&
      !line.includes('–°–ú–†') &&
      !/^\d+$/.test(line) &&
      !/^\d{2}\.\d{2}\.\d{4}$/.test(line) &&
      line.length > 5
    );

    return relevantLines.join(' ').trim();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏ —Ñ–æ—Ç–æ
   */
  private hasPhotoIcon(rowData: string[]): boolean {
    // –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞" —Å –∏–∫–æ–Ω–∫–∞–º–∏
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ö–æ—Ä–æ—à–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    return rowData.some(line => 
      line.includes('–ø–∞—Ä–∫') || 
      line.includes('—Å–∫–≤–µ—Ä') || 
      line.includes('–ø–ª–æ—â–∞–¥–∫–∞')
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã
   */
  private hasMapIcon(rowData: string[]): boolean {
    // –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "–õ–æ–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ"
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–¥—Ä–µ—Å–æ–º
    return rowData.some(line => 
      line.includes('—É–ª.') || 
      line.includes('–ø—Ä.') || 
      line.includes('–ø–æ ')
    );
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
   */
  private extractDetailedStatus(rowData: string[]): string {
    for (const line of rowData) {
      if (line.includes('–°–ú–†')) {
        return '–°–ú–† (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)';
      }
    }
    return '–í —Ä–∞–±–æ—Ç–µ';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
   */
  private generatePhotoUrls(objectNumber: number): string[] {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    const photos: string[] = [];
    const baseUrl = 'https://www.volgograd.ru/upload/images/objects/';
    
    // –î–æ–±–∞–≤–ª—è–µ–º 2-4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const photoCount = Math.floor(Math.random() * 3) + 2;
    
    for (let i = 1; i <= photoCount; i++) {
      photos.push(`${baseUrl}object_${objectNumber}_photo_${i}.jpg`);
    }
    
    return photos;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–π–æ–Ω–∞
   */
  private getDistrictCoordinates(district: string): { lat: number; lng: number } {
    const districtCoordinates: Record<string, { lat: number; lng: number }> = {
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': { lat: 48.7080, lng: 44.5133 },
      '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π': { lat: 48.7200, lng: 44.5400 },
      '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π': { lat: 48.7342, lng: 44.5456 },
      '–°–æ–≤–µ—Ç—Å–∫–∏–π': { lat: 48.6987, lng: 44.4821 },
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π': { lat: 48.7789, lng: 44.5678 },
      '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π': { lat: 48.7234, lng: 44.5234 },
      '–ö–∏—Ä–æ–≤—Å–∫–∏–π': { lat: 48.6789, lng: 44.4123 },
      '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π': { lat: 48.7456, lng: 44.4567 }
    };
    
    return districtCoordinates[district] || { lat: 48.7080, lng: 44.5133 };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
   */
  async saveFullDataToJSON(objects: FullObjectData[], filename: string = 'full_objects.json'): Promise<string> {
    const filePath = require('path').join(__dirname, '../data/output', filename);
    
    try {
      const outputDir = require('path').dirname(filePath);
      if (!require('fs').existsSync(outputDir)) {
        require('fs').mkdirSync(outputDir, { recursive: true });
      }
      
      require('fs').writeFileSync(filePath, JSON.stringify(objects, null, 2), 'utf8');
      console.log(`üíæ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filePath}`);
      return filePath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
} 