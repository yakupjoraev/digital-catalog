import { PDFParser, ObjectData } from './pdfParser';

export class SpecializedParser extends PDFParser {
  
  /**
   * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ PDF volgograd.ru
   */
  parseObjectsFromText(text: string): ObjectData[] {
    const objects: ObjectData[] = [];
    
    try {
      console.log('üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞...');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º
      const lines = text.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);

      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      let startIndex = -1;
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') && lines[i + 1] && lines[i + 1].includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥')) {
          startIndex = i;
          break;
        }
      }

      if (startIndex === -1) {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö');
        return [];
      }

      console.log(`üìç –ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${startIndex + 1}`);

      // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      let currentIndex = startIndex;
      let objectNumber = 1;

      while (currentIndex < lines.length - 10) {
        const objectData = this.parseObjectBlock(lines, currentIndex, objectNumber);
        
        if (objectData.object) {
          objects.push(objectData.object);
          console.log(`‚úÖ –û–±—ä–µ–∫—Ç ${objectNumber}: ${objectData.object.name}`);
        }
        
        if (objectData.nextIndex > currentIndex) {
          currentIndex = objectData.nextIndex;
          objectNumber++;
        } else {
          currentIndex++;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (objectNumber > 100) {
          console.log('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—ä–µ–∫—Ç–æ–≤ (100)');
          break;
        }
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      return objects;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  private parseObjectBlock(lines: string[], startIndex: number, objectNumber: number): { object: ObjectData | null; nextIndex: number } {
    try {
      let currentIndex = startIndex;
      const objectLines: string[] = [];

      // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞
      while (currentIndex < lines.length) {
        const line = lines[currentIndex];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
        if (currentIndex > startIndex && 
            line.includes('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') && 
            lines[currentIndex + 1] && 
            lines[currentIndex + 1].includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥')) {
          break;
        }

        objectLines.push(line);
        currentIndex++;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
        if (objectLines.length > 30) {
          break;
        }
      }

      // –ü–∞—Ä—Å–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      const object = this.parseObjectFromLines(objectLines, objectNumber);
      
      return {
        object: object,
        nextIndex: currentIndex
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–∞ –æ–±—ä–µ–∫—Ç–∞ ${objectNumber}:`, error);
      return { object: null, nextIndex: startIndex + 1 };
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫
   */
  private parseObjectFromLines(lines: string[], objectNumber: number): ObjectData | null {
    try {
      if (lines.length < 5) {
        return null;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const name = this.extractObjectName(lines);
      const address = this.extractObjectAddress(lines);
      const district = this.extractObjectDistrict(lines);
             const type = this.extractObjectTypeFromLines(lines);
      const description = this.extractObjectDescription(lines);
      const budget = this.extractObjectBudget(lines);
      const completionDate = this.extractObjectCompletionDate(lines);
      const contractor = this.extractContractor(lines);

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
      const object: ObjectData = {
        name: name || `–û–±—ä–µ–∫—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Ññ${objectNumber}`,
        address: address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
        district: district || '–ù–µ —É–∫–∞–∑–∞–Ω',
        type: type || '–¥—Ä—É–≥–æ–µ',
        status: '–∞–∫—Ç–∏–≤–Ω—ã–π',
        description: description,
        coordinates: this.getDistrictCoordinates(district),
        photos: [],
        budget: budget,
        completionDate: completionDate
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä—è–¥—á–∏–∫–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
      if (contractor) {
        object.description = (object.description || '') + ` –ü–æ–¥—Ä—è–¥—á–∏–∫: ${contractor}`;
      }

      return object;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ${objectNumber}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   */
  private extractObjectName(lines: string[]): string {
    // –ò—â–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    for (const line of lines) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (line.includes('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') ||
          line.includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥') ||
          line.includes('—Ä–∞–π–æ–Ω') ||
          line.includes('–ú–ë–£') ||
          line.includes('–û–û–û') ||
          /^\d+$/.test(line) ||
          line.includes('–°–ú–†')) {
        continue;
      }

      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
      if (line.includes('–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') ||
          line.includes('—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') ||
          line.includes('—Å–∫–≤–µ—Ä') ||
          line.includes('–ø–∞—Ä–∫') ||
          line.includes('–ø–ª–æ—â–∞–¥–∫–∞') ||
          line.includes('–ø–æ —É–ª.') ||
          line.includes('–ø–æ –ø—Ä.') ||
          line.length > 15) {
        
        let name = line;
        
        // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name = name.replace(/^—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è,?\s*/i, '');
        name = name.replace(/–ø—Ä–∏–ª–µ–≥–∞—é—â–∞—è –∫/i, '');
        name = name.trim();
        
        if (name.length > 5) {
          return name;
        }
      }
    }

    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
   */
  private extractObjectAddress(lines: string[]): string {
    for (const line of lines) {
      if (this.isAddressLine(line)) {
        return this.cleanAddressLine(line);
      }
    }

    // –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    const fullText = lines.join(' ');
    const addressMatch = fullText.match(/(–ø–æ\s+(?:—É–ª\.|–ø—Ä\.|–ø–µ—Ä\.|–±-—Ä|–Ω–∞–±\.|–ø–ª\.)[^,]*)/i);
    if (addressMatch) {
      return addressMatch[1].trim();
    }

    return '';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å
   */
  private isAddressLine(line: string): boolean {
    const addressPatterns = [
      /—É–ª\./i, /—É–ª–∏—Ü–∞/i, /–ø—Ä\./i, /–ø—Ä–æ—Å–ø–µ–∫—Ç/i, /–ø–µ—Ä\./i, /–ø–µ—Ä–µ—É–ª–æ–∫/i,
      /–±-—Ä/i, /–±—É–ª—å–≤–∞—Ä/i, /–Ω–∞–±\./i, /–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è/i, /–ø–ª\./i, /–ø–ª–æ—â–∞–¥—å/i,
      /–≤ —Ä–∞–π–æ–Ω–µ/i, /–ø–æ —É–ª\./i, /–¥–æ —É–ª\./i
    ];
    
    return addressPatterns.some(pattern => pattern.test(line));
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∞–¥—Ä–µ—Å
   */
  private cleanAddressLine(address: string): string {
    return address
      .replace(/^(–∞–¥—Ä–µ—Å:?\s*)/i, '')
      .replace(/–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è/gi, '')
      .trim();
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–π–æ–Ω
   */
  private extractObjectDistrict(lines: string[]): string {
    for (const line of lines) {
      if (line.includes('—Ä–∞–π–æ–Ω')) {
        const districts = [
          '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π',
          '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π'
        ];
        
        for (const district of districts) {
          if (line.includes(district)) {
            return district;
          }
        }
      }
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫
   */
  private extractObjectTypeFromLines(lines: string[]): string {
    const fullText = lines.join(' ').toLowerCase();
    
    const typeMap: Record<string, string> = {
      '–ø–∞—Ä–∫': '–ø–∞—Ä–∫',
      '—Å–∫–≤–µ—Ä': '—Å–∫–≤–µ—Ä',
      '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
      '–±—É–ª—å–≤–∞—Ä': '–±—É–ª—å–≤–∞—Ä',
      '–ø–ª–æ—â–∞–¥—å': '–ø–ª–æ—â–∞–¥—å',
      '—Ñ–æ–Ω—Ç–∞–Ω': '—Ñ–æ–Ω—Ç–∞–Ω',
      '–∞–ª–ª–µ—è': '–ø–∞—Ä–∫',
      '–æ–∑–µ–ª–µ–Ω–µ–Ω–∏—è': '–ø–∞—Ä–∫',
      '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': '–¥—Ä—É–≥–æ–µ'
    };

    for (const [key, value] of Object.entries(typeMap)) {
      if (fullText.includes(key)) {
        return value;
      }
    }

    return '–¥—Ä—É–≥–æ–µ';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  private extractObjectDescription(lines: string[]): string | undefined {
    const relevantLines = lines.filter(line => 
      !line.includes('–≥.–í–æ–ª–≥–æ–≥—Ä–∞–¥') &&
      !line.includes('–ú–ë–£') &&
      !line.includes('–û–û–û') &&
      !line.includes('–°–ú–†') &&
      !/^\d+$/.test(line) &&
      !/^\d{2}\.\d{2}\.\d{4}/.test(line) &&
      line.length > 10
    );

    if (relevantLines.length > 0) {
      return relevantLines.join(' ').trim();
    }

    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—é–¥–∂–µ—Ç
   */
  private extractObjectBudget(lines: string[]): number | undefined {
    for (const line of lines) {
      // –ò—â–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π (–≤–æ–∑–º–æ–∂–Ω–æ –±—é–¥–∂–µ—Ç –≤ –º–ª–Ω)
      const budgetMatch = line.match(/(\d+),(\d+)/);
      if (budgetMatch) {
        const value = parseFloat(`${budgetMatch[1]}.${budgetMatch[2]}`);
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –º–ª–Ω —Ä—É–±–ª–µ–π
        return value * 1000000;
      }
    }
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  private extractObjectCompletionDate(lines: string[]): string | undefined {
    for (const line of lines) {
      const dateMatch = line.match(/(\d{2})\.(\d{2})\.(\d{4})/);
      if (dateMatch) {
        return `${dateMatch[3]}-${dateMatch[2]}-${dateMatch[1]}`;
      }
    }
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
   */
  private extractContractor(lines: string[]): string | undefined {
    for (const line of lines) {
      if (line.includes('–û–û–û') || line.includes('–ò–ü') || line.includes('–ê–û')) {
        return line.trim();
      }
    }
    return undefined;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–π–æ–Ω–∞
   */
  private getDistrictCoordinates(district: string): { lat: number; lng: number } {
    const districtCoordinates: Record<string, { lat: number; lng: number }> = {
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': { lat: 48.7080, lng: 44.5133 },
      '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π': { lat: 48.7200, lng: 44.5400 },
      '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π': { lat: 48.7342, lng: 44.5456 },
      '–°–æ–≤–µ—Ç—Å–∫–∏–π': { lat: 48.6987, lng: 44.4821 },
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π': { lat: 48.7789, lng: 44.5678 },
      '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π': { lat: 48.7234, lng: 44.5234 },
      '–ö–∏—Ä–æ–≤—Å–∫–∏–π': { lat: 48.6789, lng: 44.4123 },
      '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π': { lat: 48.7456, lng: 44.4567 }
    };
    
    return districtCoordinates[district] || { lat: 48.7080, lng: 44.5133 };
  }
} 