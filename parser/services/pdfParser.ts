import axios from 'axios';
import * as fs from 'fs';
import * as path from 'path';
import * as https from 'https';
import pdf from 'pdf-parse';

export interface ObjectData {
  name: string;
  address: string;
  district: string;
  type: string;
  status: string;
  description?: string;
  coordinates?: {
    lat: number;
    lng: number;
  };
  photos?: string[];
  area?: number;
  budget?: number;
  completionDate?: string;
}

export class PDFParser {
  private downloadDir: string;
  private httpsAgent: https.Agent;

  constructor() {
    this.downloadDir = path.join(__dirname, '../data/downloads');
    this.httpsAgent = new https.Agent({
      rejectUnauthorized: false
    });
    this.ensureDownloadDir();
  }

  private ensureDownloadDir(): void {
    if (!fs.existsSync(this.downloadDir)) {
      fs.mkdirSync(this.downloadDir, { recursive: true });
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª –ø–æ URL
   */
  async downloadPDF(url: string, filename?: string): Promise<string> {
    try {
      console.log(`üì• –°–∫–∞—á–∏–≤–∞—é PDF: ${url}`);
      
      const response = await axios({
        method: 'GET',
        url: url,
        responseType: 'stream',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        httpsAgent: this.httpsAgent,
        timeout: 30000
      });

      const fileName = filename || `objects_${Date.now()}.pdf`;
      const filePath = path.join(this.downloadDir, fileName);
      
      const writer = fs.createWriteStream(filePath);
      response.data.pipe(writer);

      return new Promise((resolve, reject) => {
        writer.on('finish', () => {
          console.log(`‚úÖ PDF —Å–∫–∞—á–∞–Ω: ${filePath}`);
          resolve(filePath);
        });
        writer.on('error', reject);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF:', error);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞
   */
  async extractTextFromPDF(filePath: string): Promise<string> {
    try {
      console.log(`üìñ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF: ${filePath}`);
      
      const dataBuffer = fs.readFileSync(filePath);
      const data = await pdf(dataBuffer);
      
      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${data.text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      return data.text;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF:', error);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç—ã –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ PDF
   */
  parseObjectsFromText(text: string): ObjectData[] {
    const objects: ObjectData[] = [];
    
    try {
      console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞...');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º
      const lines = text.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);

      let currentObject: Partial<ObjectData> = {};
      let isParsingObject = false;

      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (this.isObjectStart(line)) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª
          if (isParsingObject && currentObject.name) {
            objects.push(this.finalizeObject(currentObject));
          }
          
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          currentObject = {};
          isParsingObject = true;
          currentObject.name = this.cleanObjectName(line);
          continue;
        }

        if (isParsingObject) {
          // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å
          if (this.isAddress(line)) {
            currentObject.address = this.cleanAddress(line);
          }
          
          // –ü–∞—Ä—Å–∏–º —Ä–∞–π–æ–Ω
          else if (this.isDistrict(line)) {
            currentObject.district = this.extractDistrict(line);
          }
          
          // –ü–∞—Ä—Å–∏–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
          else if (this.isObjectType(line)) {
            currentObject.type = this.extractObjectType(line);
          }
          
          // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å
          else if (this.isStatus(line)) {
            currentObject.status = this.extractStatus(line);
          }
          
          // –ü–∞—Ä—Å–∏–º –ø–ª–æ—â–∞–¥—å
          else if (this.isArea(line)) {
            currentObject.area = this.extractArea(line);
          }
          
          // –ü–∞—Ä—Å–∏–º –±—é–¥–∂–µ—Ç
          else if (this.isBudget(line)) {
            currentObject.budget = this.extractBudget(line);
          }
          
          // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          else if (this.isCompletionDate(line)) {
            currentObject.completionDate = this.extractCompletionDate(line);
          }
          
          // –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
          else if (this.isDescription(line)) {
            currentObject.description = (currentObject.description || '') + ' ' + line;
          }
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç
      if (isParsingObject && currentObject.name) {
        objects.push(this.finalizeObject(currentObject));
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      return objects;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
      return [];
    }
  }

  private isObjectStart(line: string): boolean {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    const patterns = [
      /^\d+\.\s*(.+)/,  // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞
      /^[–ê-–Ø–Å][–∞-—è—ë\s]+(?:–ø–∞—Ä–∫|—Å–∫–≤–µ—Ä|–ø–ª–æ—â–∞–¥–∫–∞|–ø–ª–æ—â–∞–¥—å|–±—É–ª—å–≤–∞—Ä|–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è)/i,
      /^–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/i,
      /^–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è/i,
      /^–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ/i
    ];
    
    return patterns.some(pattern => pattern.test(line));
  }

  private cleanObjectName(line: string): string {
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ –∏ –æ—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    return line.replace(/^\d+\.\s*/, '').trim();
  }

  private isAddress(line: string): boolean {
    const addressPatterns = [
      /—É–ª\./i, /—É–ª–∏—Ü–∞/i, /–ø—Ä\./i, /–ø—Ä–æ—Å–ø–µ–∫—Ç/i, /–ø–µ—Ä\./i, /–ø–µ—Ä–µ—É–ª–æ–∫/i,
      /–±-—Ä/i, /–±—É–ª—å–≤–∞—Ä/i, /–Ω–∞–±\./i, /–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è/i, /–ø–ª\./i, /–ø–ª–æ—â–∞–¥—å/i,
      /–¥\.\s*\d+/i, /–¥–æ–º\s*\d+/i
    ];
    
    return addressPatterns.some(pattern => pattern.test(line));
  }

  private cleanAddress(line: string): string {
    return line.replace(/^(–∞–¥—Ä–µ—Å:?\s*)/i, '').trim();
  }

  private isDistrict(line: string): boolean {
    const districts = [
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π',
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π'
    ];
    
    return districts.some(district => 
      line.toLowerCase().includes(district.toLowerCase())
    );
  }

  private extractDistrict(line: string): string {
    const districts = [
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π',
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π'
    ];
    
    for (const district of districts) {
      if (line.toLowerCase().includes(district.toLowerCase())) {
        return district;
      }
    }
    
    return '–ù–µ —É–∫–∞–∑–∞–Ω';
  }

  private isObjectType(line: string): boolean {
    const types = [
      '–ø–∞—Ä–∫', '—Å–∫–≤–µ—Ä', '–ø–ª–æ—â–∞–¥–∫–∞', '–ø–ª–æ—â–∞–¥—å', '–±—É–ª—å–≤–∞—Ä', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
      '—Ñ–æ–Ω—Ç–∞–Ω', '–ø–∞–º—è—Ç–Ω–∏–∫', '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞', '–¥–µ—Ç—Å–∫–∞—è', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è'
    ];
    
    return types.some(type => line.toLowerCase().includes(type));
  }

  private extractObjectType(line: string): string {
    const typeMap: Record<string, string> = {
      '–ø–∞—Ä–∫': '–ø–∞—Ä–∫',
      '—Å–∫–≤–µ—Ä': '—Å–∫–≤–µ—Ä',
      '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
      '–±—É–ª—å–≤–∞—Ä': '–±—É–ª—å–≤–∞—Ä',
      '–ø–ª–æ—â–∞–¥—å': '–ø–ª–æ—â–∞–¥—å',
      '—Ñ–æ–Ω—Ç–∞–Ω': '—Ñ–æ–Ω—Ç–∞–Ω',
      '–ø–∞–º—è—Ç–Ω–∏–∫': '–ø–∞–º—è—Ç–Ω–∏–∫',
      '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞': '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞'
    };

    for (const [key, value] of Object.entries(typeMap)) {
      if (line.toLowerCase().includes(key)) {
        return value;
      }
    }

    return '–¥—Ä—É–≥–æ–µ';
  }

  private isStatus(line: string): boolean {
    const statuses = ['–∑–∞–≤–µ—Ä—à–µ–Ω', '–≤—ã–ø–æ–ª–Ω–µ–Ω', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è'];
    return statuses.some(status => line.toLowerCase().includes(status));
  }

  private extractStatus(line: string): string {
    const statusMap: Record<string, string> = {
      '–∑–∞–≤–µ—Ä—à–µ–Ω': '–∞–∫—Ç–∏–≤–Ω—ã–π',
      '–≤—ã–ø–æ–ª–Ω–µ–Ω': '–∞–∫—Ç–∏–≤–Ω—ã–π',
      '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': '–Ω–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      '—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': '–Ω–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      '–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è': '–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è'
    };

    for (const [key, value] of Object.entries(statusMap)) {
      if (line.toLowerCase().includes(key)) {
        return value;
      }
    }

    return '–∞–∫—Ç–∏–≤–Ω—ã–π';
  }

  private isArea(line: string): boolean {
    return /\d+[\s,]*(?:–º¬≤|–∫–≤\.?\s*–º|–≥–∞|–≥–µ–∫—Ç–∞—Ä)/i.test(line);
  }

  private extractArea(line: string): number | undefined {
    const match = line.match(/(\d+(?:[,\.]\d+)?)[\s,]*(?:–º¬≤|–∫–≤\.?\s*–º|–≥–∞|–≥–µ–∫—Ç–∞—Ä)/i);
    if (match) {
      const value = parseFloat(match[1].replace(',', '.'));
      // –ï—Å–ª–∏ –≤ –≥–µ–∫—Ç–∞—Ä–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º¬≤
      if (/–≥–∞|–≥–µ–∫—Ç–∞—Ä/i.test(line)) {
        return value * 10000;
      }
      return value;
    }
    return undefined;
  }

  private isBudget(line: string): boolean {
    return /\d+[\s,]*(?:–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|‚ÇΩ)/i.test(line);
  }

  private extractBudget(line: string): number | undefined {
    const match = line.match(/(\d+(?:[,\.]\d+)?)[\s,]*(?:–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|‚ÇΩ)/i);
    if (match) {
      const value = parseFloat(match[1].replace(',', '.'));
      if (/–º–ª–Ω/i.test(line)) {
        return value * 1000000;
      } else if (/—Ç—ã—Å/i.test(line)) {
        return value * 1000;
      }
      return value;
    }
    return undefined;
  }

  private isCompletionDate(line: string): boolean {
    return /\d{4}[\s-]*–≥\.?|\d{1,2}[\.\-\/]\d{1,2}[\.\-\/]\d{4}/i.test(line);
  }

  private extractCompletionDate(line: string): string | undefined {
    const yearMatch = line.match(/(\d{4})[\s-]*–≥\.?/);
    if (yearMatch) {
      return yearMatch[1];
    }
    
    const dateMatch = line.match(/(\d{1,2})[\.\-\/](\d{1,2})[\.\-\/](\d{4})/);
    if (dateMatch) {
      return `${dateMatch[3]}-${dateMatch[2].padStart(2, '0')}-${dateMatch[1].padStart(2, '0')}`;
    }
    
    return undefined;
  }

  private isDescription(line: string): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    return line.length > 20 && 
           !this.isAddress(line) && 
           !this.isDistrict(line) && 
           !this.isObjectType(line) &&
           !this.isStatus(line) &&
           !this.isArea(line) &&
           !this.isBudget(line) &&
           !this.isCompletionDate(line);
  }

  private finalizeObject(obj: Partial<ObjectData>): ObjectData {
    return {
      name: obj.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      address: obj.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
      district: obj.district || '–ù–µ —É–∫–∞–∑–∞–Ω',
      type: obj.type || '–¥—Ä—É–≥–æ–µ',
      status: obj.status || '–∞–∫—Ç–∏–≤–Ω—ã–π',
      description: obj.description?.trim(),
      area: obj.area,
      budget: obj.budget,
      completionDate: obj.completionDate,
      coordinates: obj.coordinates,
      photos: obj.photos || []
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
   */
  async saveToJSON(objects: ObjectData[], filename: string = 'parsed_objects.json'): Promise<string> {
    const filePath = path.join(this.downloadDir, filename);
    
    try {
      fs.writeFileSync(filePath, JSON.stringify(objects, null, 2), 'utf8');
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filePath}`);
      return filePath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
} 