import axios from 'axios';
import * as https from 'https';
import { ObjectData } from './pdfParser';

export interface DatabaseConfig {
  backendUrl: string;
  apiKey?: string;
}

export class DatabaseIntegration {
  private config: DatabaseConfig;
  private httpsAgent: https.Agent;

  constructor(config: DatabaseConfig) {
    this.config = config;
    this.httpsAgent = new https.Agent({
      rejectUnauthorized: false
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ backend API
   */
  async uploadObjects(objects: ObjectData[]): Promise<{ success: number; errors: number; details: any[] }> {
    console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞—é ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    
    const results = {
      success: 0,
      errors: 0,
      details: [] as any[]
    };

    for (const [index, object] of objects.entries()) {
      try {
        console.log(`üìã –ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä–µ–∫—Ç ${index + 1}/${objects.length}: ${object.name}`);
        
        const response = await this.createObject(object);
        
        if (response.success) {
          results.success++;
          results.details.push({
            object: object.name,
            status: 'success',
            id: response.data?.id
          });
          console.log(`‚úÖ –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${object.name}`);
        } else {
          results.errors++;
          results.details.push({
            object: object.name,
            status: 'error',
            error: response.error
          });
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞: ${object.name} - ${response.error}`);
        }
        
      } catch (error) {
        results.errors++;
        results.details.push({
          object: object.name,
          status: 'error',
          error: error instanceof Error ? error.message : 'Unknown error'
        });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞ ${object.name}:`, error);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(100);
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${results.errors}`);

    return results;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
   */
  private async createObject(object: ObjectData): Promise<{ success: boolean; data?: any; error?: string }> {
    try {
      const payload = this.transformObjectForAPI(object);
      
      const response = await axios.post(
        `${this.config.backendUrl}/api/objects`,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            ...(this.config.apiKey && { 'Authorization': `Bearer ${this.config.apiKey}` })
          },
          timeout: 10000,
          httpsAgent: this.httpsAgent
        }
      );

      return {
        success: true,
        data: response.data.data
      };

    } catch (error) {
      if (axios.isAxiosError(error)) {
        return {
          success: false,
          error: error.response?.data?.error || error.message
        };
      }
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç API
   */
  private transformObjectForAPI(object: ObjectData): any {
    return {
      name: object.name,
      description: object.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      address: object.address,
      district: object.district,
      type: object.type,
      status: object.status,
      coordinates: {
        lat: object.coordinates?.lat || 48.7080,  // –¶–µ–Ω—Ç—Ä –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        lng: object.coordinates?.lng || 44.5133
      },
      photos: object.photos || [],
      yearBuilt: object.completionDate ? parseInt(object.completionDate) : null,
      source: '–ü–∞—Ä—Å–µ—Ä PDF volgograd.ru'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend API
   */
  async checkConnection(): Promise<boolean> {
    try {
      console.log(`üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend: ${this.config.backendUrl}`);
      
      const response = await axios.get(`${this.config.backendUrl}/`, {
        timeout: 5000,
        httpsAgent: this.httpsAgent
      });

      if (response.status === 200) {
        console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error instanceof Error ? error.message : 'Unknown error');
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getObjectsStats(): Promise<any> {
    try {
      const response = await axios.get(`${this.config.backendUrl}/api/objects/stats`, {
        timeout: 5000,
        httpsAgent: this.httpsAgent
      });

      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
   */
  async clearAllObjects(): Promise<boolean> {
    try {
      console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
      const response = await axios.get(`${this.config.backendUrl}/api/objects?limit=1000`, {
        timeout: 10000,
        httpsAgent: this.httpsAgent
      });

      const objects = response.data.data || [];
      
      if (objects.length === 0) {
        console.log('‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞');
        return true;
      }

      console.log(`üóëÔ∏è –£–¥–∞–ª—è—é ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤...`);
      
      for (const object of objects) {
        try {
          await axios.delete(`${this.config.backendUrl}/api/objects/${object.id}`, {
            timeout: 5000,
            httpsAgent: this.httpsAgent
          });
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç: ${object.name}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ${object.name}:`, error);
        }
        
        await this.delay(50);
      }

      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ: –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
   */
  async syncObjects(objects: ObjectData[], clearFirst: boolean = false): Promise<any> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const isConnected = await this.checkConnection();
      if (!isConnected) {
        throw new Error('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –û—á–∏—â–∞–µ–º –±–∞–∑—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (clearFirst) {
        console.log('üóëÔ∏è –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã...');
        await this.clearAllObjects();
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
      const results = await this.uploadObjects(objects);

      console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async objectExists(name: string, address: string): Promise<boolean> {
    try {
      const response = await axios.get(`${this.config.backendUrl}/api/objects`, {
        params: {
          search: name,
          limit: 10
        },
        timeout: 5000,
        httpsAgent: this.httpsAgent
      });

      const objects = response.data.data || [];
      
      return objects.some((obj: any) => 
        obj.name.toLowerCase() === name.toLowerCase() && 
        obj.address.toLowerCase() === address.toLowerCase()
      );
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ)
   */
  async uploadNewObjects(objects: ObjectData[]): Promise<any> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
    
    const newObjects: ObjectData[] = [];
    
    for (const object of objects) {
      const exists = await this.objectExists(object.name, object.address);
      if (!exists) {
        newObjects.push(object);
      } else {
        console.log(`‚è≠Ô∏è –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${object.name}`);
      }
      
      await this.delay(50);
    }

    console.log(`üì§ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${newObjects.length}`);
    
    if (newObjects.length > 0) {
      return await this.uploadObjects(newObjects);
    }
    
    return {
      success: 0,
      errors: 0,
      details: []
    };
  }
} 