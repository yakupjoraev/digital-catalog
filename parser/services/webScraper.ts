import axios from 'axios';
import * as cheerio from 'cheerio';
import * as https from 'https';

export interface PDFLink {
  url: string;
  title: string;
  description?: string;
}

export class WebScraper {
  private baseUrl: string;
  private httpsAgent: https.Agent;

  constructor() {
    this.baseUrl = 'https://www.volgograd.ru';
    // –°–æ–∑–¥–∞–µ–º HTTPS –∞–≥–µ–Ω—Ç —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º SSL –æ—à–∏–±–æ–∫
    this.httpsAgent = new https.Agent({
      rejectUnauthorized: false
    });
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏—â–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async findPDFLinks(pageUrl: string): Promise<PDFLink[]> {
    try {
      console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageUrl}`);
      
      const response = await axios.get(pageUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        httpsAgent: this.httpsAgent,
        timeout: 10000
      });

      const $ = cheerio.load(response.data);
      const pdfLinks: PDFLink[] = [];

      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF —Ñ–∞–π–ª—ã
      $('a[href*=".pdf"], a[href*="PDF"]').each((index, element) => {
        const $link = $(element);
        const href = $link.attr('href');
        const title = $link.text().trim() || $link.attr('title') || '';
        
        if (href) {
          let fullUrl = href;
          
          // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –¥–µ–ª–∞–µ–º –µ—ë –∞–±—Å–æ–ª—é—Ç–Ω–æ–π
          if (href.startsWith('/')) {
            fullUrl = this.baseUrl + href;
          } else if (!href.startsWith('http')) {
            fullUrl = this.baseUrl + '/' + href;
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ PDF —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          if (this.isRelevantPDF(title, href)) {
            pdfLinks.push({
              url: fullUrl,
              title: title,
              description: this.extractDescription($link)
            });
          }
        }
      });

      // –¢–∞–∫–∂–µ –∏—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å "–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
      $('a').each((index, element) => {
        const $link = $(element);
        const href = $link.attr('href');
        const text = $link.text().toLowerCase();
        
        if (href && text.includes('–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')) {
          let fullUrl = href;
          
          if (href.startsWith('/')) {
            fullUrl = this.baseUrl + href;
          } else if (!href.startsWith('http')) {
            fullUrl = this.baseUrl + '/' + href;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å—Å—ã–ª–∫—É
          const exists = pdfLinks.some(link => link.url === fullUrl);
          if (!exists) {
            pdfLinks.push({
              url: fullUrl,
              title: $link.text().trim(),
              description: this.extractDescription($link)
            });
          }
        }
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ PDF —Å—Å—ã–ª–æ–∫: ${pdfLinks.length}`);
      return pdfLinks;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ PDF –∫ –æ–±—ä–µ–∫—Ç–∞–º –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private isRelevantPDF(title: string, href: string): boolean {
    const keywords = [
      '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      '–æ–±—ä–µ–∫—Ç—ã –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
      '–ø–∞—Ä–∫',
      '—Å–∫–≤–µ—Ä',
      '–ø–ª–æ—â–∞–¥–∫–∞',
      '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
      '–±—É–ª—å–≤–∞—Ä'
    ];

    const text = (title + ' ' + href).toLowerCase();
    return keywords.some(keyword => text.includes(keyword));
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Å—ã–ª–∫–∏
   */
  private extractDescription($link: any): string | undefined {
    // –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const parent = $link.parent();
    const description = parent.text().trim();
    
    if (description && description.length > $link.text().trim().length) {
      return description;
    }

    return undefined;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ PDF –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async getDirectPDFUrl(pageUrl: string): Promise<string | null> {
    try {
      console.log(`üîó –ü–æ–ª—É—á–∞—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ PDF: ${pageUrl}`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF
      if (pageUrl.toLowerCase().endsWith('.pdf')) {
        return pageUrl;
      }

      const response = await axios.get(pageUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        httpsAgent: this.httpsAgent,
        timeout: 10000
      });

      const $ = cheerio.load(response.data);
      
      // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ PDF
      const pdfLink = $('a[href*=".pdf"]').first();
      if (pdfLink.length > 0) {
        const href = pdfLink.attr('href');
        if (href) {
          if (href.startsWith('/')) {
            return this.baseUrl + href;
          } else if (!href.startsWith('http')) {
            return this.baseUrl + '/' + href;
          }
          return href;
        }
      }

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF:', error);
      return null;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö PDF
   */
  async parseProjectPage(projectUrl: string): Promise<PDFLink[]> {
    try {
      console.log(`üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞: ${projectUrl}`);
      
      const response = await axios.get(projectUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        httpsAgent: this.httpsAgent,
        timeout: 10000
      });

      const $ = cheerio.load(response.data);
      const pdfLinks: PDFLink[] = [];

      // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF
      $('a[href*=".pdf"]').each((index, element) => {
        const $link = $(element);
        const href = $link.attr('href');
        const title = $link.text().trim();
        
        if (href) {
          let fullUrl = href;
          
          if (href.startsWith('/')) {
            fullUrl = this.baseUrl + href;
          } else if (!href.startsWith('http')) {
            fullUrl = this.baseUrl + '/' + href;
          }

          pdfLinks.push({
            url: fullUrl,
            title: title || 'PDF –¥–æ–∫—É–º–µ–Ω—Ç',
            description: this.extractDescription($link)
          });
        }
      });

      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ —Å–ø–∏—Å–∫–∞—Ö
      $('table a, ul a, ol a').each((index, element) => {
        const $link = $(element);
        const href = $link.attr('href');
        const text = $link.text().toLowerCase();
        
        if (href && (text.includes('–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || text.includes('–æ–±—ä–µ–∫—Ç'))) {
          let fullUrl = href;
          
          if (href.startsWith('/')) {
            fullUrl = this.baseUrl + href;
          } else if (!href.startsWith('http')) {
            fullUrl = this.baseUrl + '/' + href;
          }

          const exists = pdfLinks.some(link => link.url === fullUrl);
          if (!exists) {
            pdfLinks.push({
              url: fullUrl,
              title: $link.text().trim(),
              description: this.extractDescription($link)
            });
          }
        }
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞: ${pdfLinks.length}`);
      return pdfLinks;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞:', error);
      return [];
    }
  }
} 