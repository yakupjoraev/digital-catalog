import axios from 'axios';
import * as fs from 'fs';
import * as path from 'path';
import * as https from 'https';
import pdf from 'pdf-parse';
import { ObjectData } from './pdfParser';

export class ImprovedPDFParser {
  private downloadDir: string;
  private httpsAgent: https.Agent;

  constructor() {
    this.downloadDir = path.join(__dirname, '../data/downloads');
    this.httpsAgent = new https.Agent({
      rejectUnauthorized: false
    });
    this.ensureDownloadDir();
  }

  private ensureDownloadDir(): void {
    if (!fs.existsSync(this.downloadDir)) {
      fs.mkdirSync(this.downloadDir, { recursive: true });
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª –ø–æ URL
   */
  async downloadPDF(url: string, filename?: string): Promise<string> {
    try {
      console.log(`üì• –°–∫–∞—á–∏–≤–∞—é PDF: ${url}`);
      
      const response = await axios({
        method: 'GET',
        url: url,
        responseType: 'stream',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        httpsAgent: this.httpsAgent,
        timeout: 30000
      });

      const fileName = filename || `improved_objects_${Date.now()}.pdf`;
      const filePath = path.join(this.downloadDir, fileName);
      
      const writer = fs.createWriteStream(filePath);
      response.data.pipe(writer);

      return new Promise((resolve, reject) => {
        writer.on('finish', () => {
          console.log(`‚úÖ PDF —Å–∫–∞—á–∞–Ω: ${filePath}`);
          resolve(filePath);
        });
        writer.on('error', reject);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF:', error);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞
   */
  async extractTextFromPDF(filePath: string): Promise<string> {
    try {
      console.log(`üìñ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF: ${filePath}`);
      
      const dataBuffer = fs.readFileSync(filePath);
      const data = await pdf(dataBuffer);
      
      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${data.text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      return data.text;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF:', error);
      throw error;
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
   */
  parseObjectsFromText(text: string): ObjectData[] {
    const objects: ObjectData[] = [];
    
    try {
      console.log('üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞...');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º
      const lines = text.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);

      // –ò—â–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const tableRows = this.extractTableRows(lines);
      
      for (const row of tableRows) {
        const object = this.parseTableRow(row);
        if (object && this.isValidObject(object)) {
          objects.push(object);
        }
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–µ –ø–æ–ø–∞–≤—à–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
      const additionalObjects = this.parseNonTableObjects(lines);
      objects.push(...additionalObjects);

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      return objects;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractTableRows(lines: string[]): string[] {
    const tableRows: string[] = [];
    let inTable = false;
    let currentRow = '';

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
      if (this.isTableHeader(line)) {
        inTable = true;
        continue;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
      if (inTable && this.isTableEnd(line)) {
        if (currentRow.trim()) {
          tableRows.push(currentRow.trim());
        }
        inTable = false;
        currentRow = '';
        continue;
      }

      if (inTable) {
        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞, —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        if (this.isNewTableRow(line)) {
          if (currentRow.trim()) {
            tableRows.push(currentRow.trim());
          }
          currentRow = line;
        } else {
          // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
          currentRow += ' ' + line;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentRow.trim()) {
      tableRows.push(currentRow.trim());
    }

    return tableRows;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–∞–±–ª–∏—Ü—ã
   */
  private isTableHeader(line: string): boolean {
    const headerPatterns = [
      /‚Ññ\s*–ø\/–ø/i,
      /–æ–±—ä–µ–∫—Ç.*–∞–¥—Ä–µ—Å.*–∑–∞–∫–∞–∑—á–∏–∫/i,
      /–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.*–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ/i,
      /–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.*—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏/i
    ];
    
    return headerPatterns.some(pattern => pattern.test(line));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ü–æ–º —Ç–∞–±–ª–∏—Ü—ã
   */
  private isTableEnd(line: string): boolean {
    const endPatterns = [
      /–∏—Ç–æ–≥–æ/i,
      /–≤—Å–µ–≥–æ/i,
      /–æ–±—â–∞—è —Å—É–º–º–∞/i,
      /–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ/i,
      /^[–ê-–Ø–Å][–ê-–Ø–Å\s]+$/  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    ];
    
    return endPatterns.some(pattern => pattern.test(line));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  private isNewTableRow(line: string): boolean {
    // –°—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞
    return /^\d+[\.\s]/.test(line);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—ä–µ–∫—Ç
   */
  private parseTableRow(row: string): ObjectData | null {
    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
      const parts = this.splitTableRow(row);
      
      if (parts.length < 3) {
        return null;
      }

      const name = this.extractName(parts);
      const address = this.extractAddress(parts);
      const district = this.extractDistrict(row);
      const type = this.extractType(row);
      const description = this.extractDescription(parts);
      const budget = this.extractBudget(row);
      const completionDate = this.extractCompletionDate(row);

      return {
        name: name || '–û–±—ä–µ–∫—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        address: address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
        district: district || '–ù–µ —É–∫–∞–∑–∞–Ω',
        type: type || '–¥—Ä—É–≥–æ–µ',
        status: '–∞–∫—Ç–∏–≤–Ω—ã–π',
        description: description,
        coordinates: this.getDefaultCoordinates(district),
        photos: [],
        budget: budget,
        completionDate: completionDate
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
      return null;
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —á–∞—Å—Ç–∏
   */
  private splitTableRow(row: string): string[] {
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ
    const withoutNumber = row.replace(/^\d+[\.\s]+/, '');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const parts: string[] = [];
    let currentPart = '';
    const words = withoutNumber.split(/\s+/);

    for (const word of words) {
      if (this.isPartSeparator(word)) {
        if (currentPart.trim()) {
          parts.push(currentPart.trim());
        }
        currentPart = word;
      } else {
        currentPart += ' ' + word;
      }
    }

    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }

    return parts;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —á–∞—Å—Ç–µ–π
   */
  private isPartSeparator(word: string): boolean {
    const separators = [
      '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è',
      '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è',
      '–ú–ö–£',
      '–ú–ë–£',
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è',
      '–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ',
      '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–æ–π',
      '–æ–±–ª–∞—Å—Ç–∏'
    ];
    
    return separators.some(sep => word.includes(sep));
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   */
  private extractName(parts: string[]): string {
    if (parts.length === 0) return '';
    
    let name = parts[0];
    
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    name = name.replace(/^[\d\.\s]+/, ''); // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞
    name = name.replace(/–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è/gi, ''); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    name = name.trim();
    
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã/—á–∏—Å–ª–∞
    if (name.length < 3 || /^\d+[\.\d]*$/.test(name)) {
      // –ò—â–µ–º –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö
      for (const part of parts) {
        if (this.isValidObjectName(part)) {
          return part.trim();
        }
      }
      return '–û–±—ä–µ–∫—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
    }
    
    return name;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
   */
  private isValidObjectName(text: string): boolean {
    const validPatterns = [
      /–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/i,
      /–ø–∞—Ä–∫/i,
      /—Å–∫–≤–µ—Ä/i,
      /–ø–ª–æ—â–∞–¥–∫–∞/i,
      /–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è/i,
      /–±—É–ª—å–≤–∞—Ä/i,
      /–ø–ª–æ—â–∞–¥—å/i,
      /–∞–ª–ª–µ—è/i,
      /—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è.*—É–ª\./i
    ];
    
    return validPatterns.some(pattern => pattern.test(text)) && 
           text.length > 10 && 
           !/^\d+[\.\d\s]*$/.test(text);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å
   */
  private extractAddress(parts: string[]): string {
    for (const part of parts) {
      if (this.isAddress(part)) {
        return this.cleanAddress(part);
      }
    }
    
    // –ò—â–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const fullText = parts.join(' ');
    const addressMatch = fullText.match(/(—É–ª\.|–ø—Ä\.|–ø–µ—Ä\.|–±-—Ä|–Ω–∞–±\.|–ø–ª\.)[^,]*/i);
    if (addressMatch) {
      return addressMatch[0].trim();
    }
    
    return '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∞–¥—Ä–µ—Å
   */
  private isAddress(text: string): boolean {
    const addressPatterns = [
      /—É–ª\./i, /—É–ª–∏—Ü–∞/i, /–ø—Ä\./i, /–ø—Ä–æ—Å–ø–µ–∫—Ç/i, /–ø–µ—Ä\./i, /–ø–µ—Ä–µ—É–ª–æ–∫/i,
      /–±-—Ä/i, /–±—É–ª—å–≤–∞—Ä/i, /–Ω–∞–±\./i, /–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è/i, /–ø–ª\./i, /–ø–ª–æ—â–∞–¥—å/i,
      /–≤ —Ä–∞–π–æ–Ω–µ/i, /–ø–æ —É–ª\./i, /–¥–æ —É–ª\./i
    ];
    
    return addressPatterns.some(pattern => pattern.test(text));
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∞–¥—Ä–µ—Å
   */
  private cleanAddress(address: string): string {
    return address
      .replace(/^(–∞–¥—Ä–µ—Å:?\s*)/i, '')
      .replace(/–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è/gi, '')
      .trim();
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–π–æ–Ω
   */
  private extractDistrict(text: string): string {
    const districts = [
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π',
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π'
    ];
    
    for (const district of districts) {
      if (text.toLowerCase().includes(district.toLowerCase())) {
        return district;
      }
    }
    
    return '–ù–µ —É–∫–∞–∑–∞–Ω';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
   */
  private extractType(text: string): string {
    const typeMap: Record<string, string> = {
      '–ø–∞—Ä–∫': '–ø–∞—Ä–∫',
      '—Å–∫–≤–µ—Ä': '—Å–∫–≤–µ—Ä',
      '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞': '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
      '–±—É–ª—å–≤–∞—Ä': '–±—É–ª—å–≤–∞—Ä',
      '–ø–ª–æ—â–∞–¥—å': '–ø–ª–æ—â–∞–¥—å',
      '—Ñ–æ–Ω—Ç–∞–Ω': '—Ñ–æ–Ω—Ç–∞–Ω',
      '–∞–ª–ª–µ—è': '–ø–∞—Ä–∫',
      '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è': '–¥—Ä—É–≥–æ–µ'
    };

    for (const [key, value] of Object.entries(typeMap)) {
      if (text.toLowerCase().includes(key)) {
        return value;
      }
    }

    return '–¥—Ä—É–≥–æ–µ';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  private extractDescription(parts: string[]): string | undefined {
    const description = parts.slice(1).join(' ');
    
    if (description.length > 20) {
      return description
        .replace(/–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è/gi, '')
        .replace(/\s+/g, ' ')
        .trim();
    }
    
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—é–¥–∂–µ—Ç
   */
  private extractBudget(text: string): number | undefined {
    const budgetMatch = text.match(/(\d+(?:[,\.]\d+)?)[\s,]*(?:–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|‚ÇΩ)/i);
    if (budgetMatch) {
      const value = parseFloat(budgetMatch[1].replace(',', '.'));
      if (/–º–ª–Ω/i.test(text)) {
        return value * 1000000;
      } else if (/—Ç—ã—Å/i.test(text)) {
        return value * 1000;
      }
      return value;
    }
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  private extractCompletionDate(text: string): string | undefined {
    const dateMatch = text.match(/(\d{2})\.(\d{2})\.(\d{4})/);
    if (dateMatch) {
      return `${dateMatch[3]}-${dateMatch[2]}-${dateMatch[1]}`;
    }
    
    const yearMatch = text.match(/(\d{4})/);
    if (yearMatch) {
      return yearMatch[1];
    }
    
    return undefined;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–π–æ–Ω–∞
   */
  private getDefaultCoordinates(district: string): { lat: number; lng: number } {
    const districtCoordinates: Record<string, { lat: number; lng: number }> = {
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': { lat: 48.7080, lng: 44.5133 },
      '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π': { lat: 48.7200, lng: 44.5400 },
      '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π': { lat: 48.7342, lng: 44.5456 },
      '–°–æ–≤–µ—Ç—Å–∫–∏–π': { lat: 48.6987, lng: 44.4821 },
      '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π': { lat: 48.7789, lng: 44.5678 },
      '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π': { lat: 48.7234, lng: 44.5234 },
      '–ö–∏—Ä–æ–≤—Å–∫–∏–π': { lat: 48.6789, lng: 44.4123 },
      '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π': { lat: 48.7456, lng: 44.4567 }
    };
    
    return districtCoordinates[district] || { lat: 48.7080, lng: 44.5133 };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞
   */
  private isValidObject(object: ObjectData): boolean {
    return object.name.length > 2 && 
           object.name !== '–û–±—ä–µ–∫—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' &&
           !object.name.match(/^\d+[\.\d]*$/);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç—ã, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
   */
  private parseNonTableObjects(lines: string[]): ObjectData[] {
    const objects: ObjectData[] = [];
    
    // –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    for (const line of lines) {
      if (this.isStandaloneObject(line)) {
        const object = this.parseStandaloneLine(line);
        if (object && this.isValidObject(object)) {
          objects.push(object);
        }
      }
    }
    
    return objects;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
   */
  private isStandaloneObject(line: string): boolean {
    const patterns = [
      /–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.*–ø–∞—Ä–∫/i,
      /–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.*—Å–∫–≤–µ—Ä/i,
      /–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.*–ø–ª–æ—â–∞–¥–∫–∞/i,
      /—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.*–ø–∞—Ä–∫/i,
      /—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ.*–ø–ª–æ—â–∞–¥–∫–∞/i
    ];
    
    return patterns.some(pattern => pattern.test(line)) && line.length > 20;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
   */
  private parseStandaloneLine(line: string): ObjectData | null {
    try {
      const name = this.extractStandaloneName(line);
      const address = this.extractAddress([line]);
      const district = this.extractDistrict(line);
      const type = this.extractType(line);

      return {
        name: name,
        address: address,
        district: district,
        type: type,
        status: '–∞–∫—Ç–∏–≤–Ω—ã–π',
        description: line.length > 50 ? line.substring(0, 200) : undefined,
        coordinates: this.getDefaultCoordinates(district),
        photos: []
      };

    } catch (error) {
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  private extractStandaloneName(line: string): string {
    // –ò—â–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    const nameMatch = line.match(/(–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ|—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è|—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ)[^,]*/i);
    if (nameMatch) {
      return nameMatch[0].trim();
    }
    
    return line.substring(0, 50).trim();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
   */
  async saveToJSON(objects: ObjectData[], filename: string = 'improved_objects.json'): Promise<string> {
    const filePath = path.join(this.downloadDir, '../output', filename);
    
    try {
      const outputDir = path.dirname(filePath);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      fs.writeFileSync(filePath, JSON.stringify(objects, null, 2), 'utf8');
      console.log(`üíæ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filePath}`);
      return filePath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
} 