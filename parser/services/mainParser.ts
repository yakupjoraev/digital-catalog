import { WebScraper, PDFLink } from './webScraper';
import { PDFParser, ObjectData } from './pdfParser';
import * as fs from 'fs';
import * as path from 'path';

export class MainParser {
  private webScraper: WebScraper;
  private pdfParser: PDFParser;
  private outputDir: string;

  constructor() {
    this.webScraper = new WebScraper();
    this.pdfParser = new PDFParser();
    this.outputDir = path.join(__dirname, '../data/output');
    this.ensureOutputDir();
  }

  private ensureOutputDir(): void {
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–∞—Ä—Å–∏—Ç —Å–∞–π—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF
   */
  async parseVolgogradObjects(): Promise<ObjectData[]> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞...');
    
    try {
      // 1. –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
      const mainPageUrl = 'https://www.volgograd.ru/vo-project/obekty-stroitelstva-natsionalnykh-proektov/';
      console.log(`üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${mainPageUrl}`);
      
      const pdfLinks = await this.webScraper.findPDFLinks(mainPageUrl);
      
      if (pdfLinks.length === 0) {
        console.log('‚ö†Ô∏è PDF —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');
        return await this.parseAlternativeUrls();
      }

      // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ PDF —Å—Å—ã–ª–∫–∏
      const allObjects: ObjectData[] = [];
      
      for (const pdfLink of pdfLinks) {
        console.log(`\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${pdfLink.title}`);
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ PDF –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          let pdfUrl = pdfLink.url;
          if (!pdfUrl.toLowerCase().endsWith('.pdf')) {
            const directUrl = await this.webScraper.getDirectPDFUrl(pdfUrl);
            if (directUrl) {
              pdfUrl = directUrl;
            } else {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ PDF: ${pdfLink.title}`);
              continue;
            }
          }

          // –°–∫–∞—á–∏–≤–∞–µ–º PDF
          const fileName = this.generateFileName(pdfLink.title);
          const filePath = await this.pdfParser.downloadPDF(pdfUrl, fileName);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
          const text = await this.pdfParser.extractTextFromPDF(filePath);
          
          // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç—ã
          const objects = this.pdfParser.parseObjectsFromText(text);
          
          if (objects.length > 0) {
            allObjects.push(...objects);
            console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
          } else {
            console.log(`‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ PDF: ${pdfLink.title}`);
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF ${pdfLink.title}:`, error);
          continue;
        }
      }

      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (allObjects.length > 0) {
        await this.saveResults(allObjects);
        console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${allObjects.length}`);
      } else {
        console.log('\n‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      return allObjects;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
   */
  async parseAlternativeUrls(): Promise<ObjectData[]> {
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL...');
    
    const alternativeUrls = [
      'https://www.volgograd.ru/vo-project/obekty-np-2025-2030/',
      'https://www.volgograd.ru/vo-project/obekty-np-2025-2030/!–û–ë–™–ï–ö–¢–´%20–ë–õ–ê–ì–û–£–°–¢–†–û–ô–°–¢–í–ê%2022.05.2025.pdf'
    ];

    const allObjects: ObjectData[] = [];

    for (const url of alternativeUrls) {
      try {
        console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è—é URL: ${url}`);
        
        if (url.toLowerCase().endsWith('.pdf')) {
          // –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF
          const fileName = 'objects_direct.pdf';
          const filePath = await this.pdfParser.downloadPDF(url, fileName);
          const text = await this.pdfParser.extractTextFromPDF(filePath);
          const objects = this.pdfParser.parseObjectsFromText(text);
          
          if (objects.length > 0) {
            allObjects.push(...objects);
            console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: ${objects.length}`);
          }
        } else {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ PDF
          const pdfLinks = await this.webScraper.parseProjectPage(url);
          
          for (const pdfLink of pdfLinks) {
            try {
              let pdfUrl = pdfLink.url;
              if (!pdfUrl.toLowerCase().endsWith('.pdf')) {
                const directUrl = await this.webScraper.getDirectPDFUrl(pdfUrl);
                if (directUrl) {
                  pdfUrl = directUrl;
                } else {
                  continue;
                }
              }

              const fileName = this.generateFileName(pdfLink.title);
              const filePath = await this.pdfParser.downloadPDF(pdfUrl, fileName);
              const text = await this.pdfParser.extractTextFromPDF(filePath);
              const objects = this.pdfParser.parseObjectsFromText(text);
              
              if (objects.length > 0) {
                allObjects.push(...objects);
                console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
              }
              
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF ${pdfLink.title}:`, error);
              continue;
            }
          }
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL ${url}:`, error);
        continue;
      }
    }

    return allObjects;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π PDF —Ñ–∞–π–ª –ø–æ URL
   */
  async parsePDFByUrl(pdfUrl: string, title?: string): Promise<ObjectData[]> {
    try {
      console.log(`üìÑ –ü–∞—Ä—Å–∏–Ω–≥ PDF: ${pdfUrl}`);
      
      const fileName = this.generateFileName(title || 'manual_pdf');
      const filePath = await this.pdfParser.downloadPDF(pdfUrl, fileName);
      const text = await this.pdfParser.extractTextFromPDF(filePath);
      const objects = this.pdfParser.parseObjectsFromText(text);
      
      if (objects.length > 0) {
        await this.saveResults(objects, `manual_${Date.now()}.json`);
        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
      }

      return objects;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF:', error);
      return [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  private async saveResults(objects: ObjectData[], filename?: string): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
      const jsonFileName = filename || `volgograd_objects_${new Date().toISOString().split('T')[0]}.json`;
      const jsonPath = path.join(this.outputDir, jsonFileName);
      fs.writeFileSync(jsonPath, JSON.stringify(objects, null, 2), 'utf8');
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON: ${jsonPath}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      const csvFileName = jsonFileName.replace('.json', '.csv');
      const csvPath = path.join(this.outputDir, csvFileName);
      await this.saveToCSV(objects, csvPath);
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV: ${csvPath}`);

      // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
      const reportFileName = jsonFileName.replace('.json', '_report.txt');
      const reportPath = path.join(this.outputDir, reportFileName);
      await this.generateReport(objects, reportPath);
      console.log(`üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportPath}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
   */
  private async saveToCSV(objects: ObjectData[], filePath: string): Promise<void> {
    const headers = [
      '–ù–∞–∑–≤–∞–Ω–∏–µ',
      '–ê–¥—Ä–µ—Å', 
      '–†–∞–π–æ–Ω',
      '–¢–∏–ø',
      '–°—Ç–∞—Ç—É—Å',
      '–û–ø–∏—Å–∞–Ω–∏–µ',
      '–ü–ª–æ—â–∞–¥—å',
      '–ë—é–¥–∂–µ—Ç',
      '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
      '–®–∏—Ä–æ—Ç–∞',
      '–î–æ–ª–≥–æ—Ç–∞'
    ];

    const csvLines = [headers.join(';')];
    
    for (const obj of objects) {
      const line = [
        this.escapeCsvValue(obj.name),
        this.escapeCsvValue(obj.address),
        this.escapeCsvValue(obj.district),
        this.escapeCsvValue(obj.type),
        this.escapeCsvValue(obj.status),
        this.escapeCsvValue(obj.description || ''),
        obj.area || '',
        obj.budget || '',
        obj.completionDate || '',
        obj.coordinates?.lat || '',
        obj.coordinates?.lng || ''
      ];
      csvLines.push(line.join(';'));
    }

    fs.writeFileSync(filePath, csvLines.join('\n'), 'utf8');
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è CSV
   */
  private escapeCsvValue(value: string): string {
    if (value.includes(';') || value.includes('"') || value.includes('\n')) {
      return `"${value.replace(/"/g, '""')}"`;
    }
    return value;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ
   */
  private async generateReport(objects: ObjectData[], filePath: string): Promise<void> {
    const report = [
      '=== –û–¢–ß–ï–¢ –û –ü–ê–†–°–ò–ù–ì–ï –û–ë–™–ï–ö–¢–û–í –ë–õ–ê–ì–û–£–°–¢–†–û–ô–°–¢–í–ê –í–û–õ–ì–û–ì–†–ê–î–ê ===',
      `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`,
      `–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`,
      '',
      '=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ô–û–ù–ê–ú ===',
    ];

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
    const districtStats = objects.reduce((acc, obj) => {
      acc[obj.district] = (acc[obj.district] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    for (const [district, count] of Object.entries(districtStats)) {
      report.push(`${district}: ${count} –æ–±—ä–µ–∫—Ç–æ–≤`);
    }

    report.push('', '=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú ===');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const typeStats = objects.reduce((acc, obj) => {
      acc[obj.type] = (acc[obj.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    for (const [type, count] of Object.entries(typeStats)) {
      report.push(`${type}: ${count} –æ–±—ä–µ–∫—Ç–æ–≤`);
    }

    report.push('', '=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú ===');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = objects.reduce((acc, obj) => {
      acc[obj.status] = (acc[obj.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    for (const [status, count] of Object.entries(statusStats)) {
      report.push(`${status}: ${count} –æ–±—ä–µ–∫—Ç–æ–≤`);
    }

    fs.writeFileSync(filePath, report.join('\n'), 'utf8');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  private generateFileName(title: string): string {
    const cleanTitle = title
      .replace(/[^–∞-—è—ë\w\s]/gi, '')
      .replace(/\s+/g, '_')
      .toLowerCase();
    
    return `${cleanTitle}_${Date.now()}.pdf`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º
   */
  getStatistics(objects: ObjectData[]): any {
    return {
      total: objects.length,
      byDistrict: objects.reduce((acc, obj) => {
        acc[obj.district] = (acc[obj.district] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      byType: objects.reduce((acc, obj) => {
        acc[obj.type] = (acc[obj.type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      byStatus: objects.reduce((acc, obj) => {
        acc[obj.status] = (acc[obj.status] || 0) + 1;
        return acc;
      }, {} as Record<string, number>),
      withCoordinates: objects.filter(obj => obj.coordinates).length,
      withPhotos: objects.filter(obj => obj.photos && obj.photos.length > 0).length,
      withBudget: objects.filter(obj => obj.budget).length,
      withArea: objects.filter(obj => obj.area).length
    };
  }
} 