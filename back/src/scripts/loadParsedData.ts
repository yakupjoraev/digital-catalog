import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

interface ParsedObject {
  name: string;
  address: string;
  district: string;
  type: string;
  status: string;
  description: string;
  coordinates: {
    lat: number;
    lng: number;
  };
  photos: string[];
  objectNumber: number;
  region: string;
  customer: string;
  contractor: string;
  startDate: string;
  endDate: string;
  budgetMillion: number;
  budget: number;
  completionDate: string;
  fullDescription: string;
  photoIcon: boolean;
  mapIcon: boolean;
  status_detailed: string;
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
const typeMapping: { [key: string]: string } = {
  '–ø–∞—Ä–∫': 'PARK',
  '—Å–∫–≤–µ—Ä': 'SQUARE',
  '–ø–µ—à–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞': 'PEDESTRIAN_ZONE',
  '–ø–ª–æ—â–∞–¥–∫–∞': 'PLAYGROUND',
  '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': 'EMBANKMENT',
  '—Ñ–æ–Ω—Ç–∞–Ω': 'FOUNTAIN',
  '–ø–∞–º—è—Ç–Ω–∏–∫': 'MONUMENT',
  '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è': 'PARK'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–π–æ–Ω–æ–≤
const districtMapping: { [key: string]: string } = {
  '–°–æ–≤–µ—Ç—Å–∫–∏–π': 'SOVETSKY',
  '–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π': 'KRASNOOKTYABRSKY',
  '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π': 'DZERZHINSKY',
  '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π': 'KRASNOARMEYSKY',
  '–ö–∏—Ä–æ–≤—Å–∫–∏–π': 'KIROVSKY',
  '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': 'CENTRAL',
  '–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π': 'TRAKTOROZAVODSKY',
  '–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π': 'VOROSHILOVSKY',
  '–ù–µ —É–∫–∞–∑–∞–Ω': 'CENTRAL',
  // –†–∞–π–æ–Ω—ã –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
  '–°—Ä–µ–¥–Ω–µ–∞—Ö—Ç—É–±–∏–Ω—Å–∫–∏–π': 'SREDNEAKHTUBINSKY',
  '–ù–æ–≤–æ–∞–Ω–Ω–∏–Ω—Å–∫–∏–π': 'NOVOANNINSK',
  '–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫–∏–π': 'NIKOLAEVSKY',
  '–ü–∞–ª–ª–∞—Å–æ–≤—Å–∫–∏–π': 'PALLASOVSKY',
  '–°—É—Ä–æ–≤–∏–∫–∏–Ω—Å–∫–∏–π': 'SUROVIKINSKY',
  '–°–µ—Ä–∞—Ñ–∏–º–æ–≤–∏—á—Å–∫–∏–π': 'SERAFIMOVICH',
  '–ö–∞–º—ã—à–∏–Ω—Å–∫–∏–π': 'KAMYSHINSKY',
  '–°—Ç–∞—Ä–æ–ø–æ–ª—Ç–∞–≤—Å–∫–∏–π': 'STAROPOLYAVSKY',
  '–ñ–∏—Ä–Ω–æ–≤—Å–∫–∏–π': 'ZHIRNOVSKY',
  '–ö–∞–ª–∞—á–µ–≤—Å–∫–∏–π': 'KALACHEVSKY',
  '–õ–µ–Ω–∏–Ω—Å–∫–∏–π': 'LENINSKY',
  '–ö–æ—Ç–µ–ª—å–Ω–∏–∫–æ–≤—Å–∫–∏–π': 'KOTELNIKOVSKY'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
function extractDistrictFromDescription(description: string, fullDescription: string): string {
  const text = `${description} ${fullDescription}`.toLowerCase();
  
  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  for (const [districtName, districtCode] of Object.entries(districtMapping)) {
    if (districtName === '–ù–µ —É–∫–∞–∑–∞–Ω') continue;
    
    const patterns = [
      `${districtName.toLowerCase()} —Ä–∞–π–æ–Ω`,
      `${districtName.toLowerCase()}—Å–∫–∏–π —Ä–∞–π–æ–Ω`,
      `${districtName.toLowerCase()}–æ–≥–æ —Ä–∞–π–æ–Ω–∞`
    ];
    
    for (const pattern of patterns) {
      if (text.includes(pattern)) {
        return districtCode;
      }
    }
  }
  
  return 'CENTRAL'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
const statusMapping: { [key: string]: string } = {
  '–∞–∫—Ç–∏–≤–Ω—ã–π': 'ACTIVE',
  '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 'UNDER_CONSTRUCTION',
  '–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è': 'PLANNED',
  '–∑–∞–≤–µ—Ä—à–µ–Ω': 'COMPLETED'
};

async function loadParsedData() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const dataPath = path.join(__dirname, '../../../parser/data/output/final_full_objects_1748251911697.json');
    
    if (!fs.existsSync(dataPath)) {
      console.error('‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', dataPath);
      return;
    }

    const rawData = fs.readFileSync(dataPath, 'utf-8');
    const parsedObjects: ParsedObject[] = JSON.parse(rawData);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${parsedObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);

    let loaded = 0;
    let skipped = 0;

    for (const obj of parsedObjects) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existing = await prisma.object.findFirst({
          where: { name: obj.name }
        });

        if (existing) {
          console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç: ${obj.name}`);
          skipped++;
          continue;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        const objectType = typeMapping[obj.type.toLowerCase()] || 'PARK';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ø–æ–ª—è district, –ø–æ—Ç–æ–º –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è)
        let district = districtMapping[obj.district] || 'CENTRAL';
        if (obj.district === '–ù–µ —É–∫–∞–∑–∞–Ω') {
          district = extractDistrictFromDescription(obj.description || '', obj.fullDescription || '');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const status = statusMapping[obj.status.toLowerCase()] || 'ACTIVE';
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—É–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
        const validPhotos = (obj.photos || []).filter(photo => {
          // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ volgograd.ru –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
          return !photo.includes('volgograd.ru');
        });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        await prisma.object.create({
          data: {
            name: obj.name,
            type: objectType,
            district: district,
            address: obj.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
            description: obj.description || obj.fullDescription || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            photos: JSON.stringify(validPhotos),
            yearBuilt: undefined, // –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            latitude: obj.coordinates?.lat || 48.7080, // –¶–µ–Ω—Ç—Ä –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            longitude: obj.coordinates?.lng || 44.5133,
            status: status,
            source: `–ü–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞ (–æ–±—ä–µ–∫—Ç ‚Ññ${obj.objectNumber})`
          }
        });

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: ${obj.name} (${objectType}, ${district})`);
        loaded++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–∞ "${obj.name}":`, error);
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:`);
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${loaded} –æ–±—ä–µ–∫—Ç–æ–≤`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped} –æ–±—ä–µ–∫—Ç–æ–≤`);
    console.log(`üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${await prisma.object.count()} –æ–±—ä–µ–∫—Ç–æ–≤`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  loadParsedData();
}

export default loadParsedData; 