import { PrismaClient } from '@prisma/client';
import loadParsedData from './loadParsedData';

const prisma = new PrismaClient();

async function fullRestore() {
  try {
    console.log('üîÑ –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
    const currentCount = await prisma.object.count();
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${currentCount}`);

    if (currentCount === 0) {
      console.log('üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...\n');
      
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ seed —Å–∫—Ä–∏–ø—Ç–∞...');
      const { exec } = require('child_process');
      await new Promise((resolve, reject) => {
        exec('npm run db:seed', (error: any, stdout: any, stderr: any) => {
          if (error) reject(error);
          else resolve(stdout);
        });
      });
      
      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await loadParsedData();
      
    } else if (currentCount < 20) {
      console.log('‚ö†Ô∏è  –í –±–∞–∑–µ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ...\n');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await loadParsedData();
      
    } else {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
    }

    const finalCount = await prisma.object.count();
    console.log(`\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${finalCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  fullRestore();
}

export default fullRestore; 