import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;
const prisma = new PrismaClient();

// Middleware
app.use(cors());
app.use(express.json());

// –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞',
    version: '1.0.0',
    database: 'SQLite',
    status: 'OK'
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
app.get('/api/objects', async (req, res) => {
  try {
    const objects = await prisma.object.findMany({
      take: 10
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const transformedObjects = objects.map((obj: any) => ({
      ...obj,
      photos: obj.photos ? JSON.parse(obj.photos) : [],
      coordinates: {
        lat: obj.latitude,
        lng: obj.longitude
      }
    }));

    res.json({
      success: true,
      data: transformedObjects,
      count: objects.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤'
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    app.listen(PORT, () => {
      console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìç API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (${process.env.DATABASE_URL})`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer(); 